package so.trophy.resources.streaks;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import so.trophy.core.ClientOptions;
import so.trophy.core.RequestOptions;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import so.trophy.resources.streaks.requests.StreaksListRequest;
import so.trophy.resources.streaks.requests.StreaksRankingsRequest;
import so.trophy.types.BulkStreakResponseItem;
import so.trophy.types.StreakRankingUser;

public class AsyncStreaksClient {
  protected final ClientOptions clientOptions;

  private final AsyncRawStreaksClient rawClient;

  public AsyncStreaksClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.rawClient = new AsyncRawStreaksClient(clientOptions);
  }

  /**
   * Get responses with HTTP metadata like headers
   */
  public AsyncRawStreaksClient withRawResponse() {
    return this.rawClient;
  }

  /**
   * Get the streak lengths of a list of users, ranked by streak length from longest to shortest.
   */
  public CompletableFuture<List<BulkStreakResponseItem>> list() {
    return this.rawClient.list().thenApply(response -> response.body());
  }

  /**
   * Get the streak lengths of a list of users, ranked by streak length from longest to shortest.
   */
  public CompletableFuture<List<BulkStreakResponseItem>> list(StreaksListRequest request) {
    return this.rawClient.list(request).thenApply(response -> response.body());
  }

  /**
   * Get the streak lengths of a list of users, ranked by streak length from longest to shortest.
   */
  public CompletableFuture<List<BulkStreakResponseItem>> list(StreaksListRequest request,
      RequestOptions requestOptions) {
    return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Get the top users by streak length (active or longest).
   */
  public CompletableFuture<List<StreakRankingUser>> rankings() {
    return this.rawClient.rankings().thenApply(response -> response.body());
  }

  /**
   * Get the top users by streak length (active or longest).
   */
  public CompletableFuture<List<StreakRankingUser>> rankings(StreaksRankingsRequest request) {
    return this.rawClient.rankings(request).thenApply(response -> response.body());
  }

  /**
   * Get the top users by streak length (active or longest).
   */
  public CompletableFuture<List<StreakRankingUser>> rankings(StreaksRankingsRequest request,
      RequestOptions requestOptions) {
    return this.rawClient.rankings(request, requestOptions).thenApply(response -> response.body());
  }
}
