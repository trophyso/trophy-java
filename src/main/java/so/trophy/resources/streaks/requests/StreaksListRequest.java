package so.trophy.resources.streaks.requests;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = StreaksListRequest.Builder.class
)
public final class StreaksListRequest {
  private final Optional<List<String>> userIds;

  private final Map<String, Object> additionalProperties;

  private StreaksListRequest(Optional<List<String>> userIds,
      Map<String, Object> additionalProperties) {
    this.userIds = userIds;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return A list of up to 100 user IDs.
   */
  @JsonProperty("userIds")
  public Optional<List<String>> getUserIds() {
    return userIds;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof StreaksListRequest && equalTo((StreaksListRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(StreaksListRequest other) {
    return userIds.equals(other.userIds);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.userIds);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<List<String>> userIds = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(StreaksListRequest other) {
      userIds(other.getUserIds());
      return this;
    }

    /**
     * <p>A list of up to 100 user IDs.</p>
     */
    @JsonSetter(
        value = "userIds",
        nulls = Nulls.SKIP
    )
    public Builder userIds(Optional<List<String>> userIds) {
      this.userIds = userIds;
      return this;
    }

    public Builder userIds(List<String> userIds) {
      this.userIds = Optional.ofNullable(userIds);
      return this;
    }

    public Builder userIds(String userIds) {
      this.userIds = Optional.of(Collections.singletonList(userIds));
      return this;
    }

    public StreaksListRequest build() {
      return new StreaksListRequest(userIds, additionalProperties);
    }
  }
}
