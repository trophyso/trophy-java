package so.trophy.resources.streaks;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import so.trophy.core.ClientOptions;
import so.trophy.core.RequestOptions;
import java.util.List;
import so.trophy.resources.streaks.requests.StreaksListRequest;
import so.trophy.resources.streaks.requests.StreaksRankingsRequest;
import so.trophy.types.BulkStreakResponseItem;
import so.trophy.types.StreakRankingUser;

public class StreaksClient {
  protected final ClientOptions clientOptions;

  private final RawStreaksClient rawClient;

  public StreaksClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.rawClient = new RawStreaksClient(clientOptions);
  }

  /**
   * Get responses with HTTP metadata like headers
   */
  public RawStreaksClient withRawResponse() {
    return this.rawClient;
  }

  /**
   * Get the streak lengths of a list of users, ranked by streak length from longest to shortest.
   */
  public List<BulkStreakResponseItem> list() {
    return this.rawClient.list().body();
  }

  /**
   * Get the streak lengths of a list of users, ranked by streak length from longest to shortest.
   */
  public List<BulkStreakResponseItem> list(StreaksListRequest request) {
    return this.rawClient.list(request).body();
  }

  /**
   * Get the streak lengths of a list of users, ranked by streak length from longest to shortest.
   */
  public List<BulkStreakResponseItem> list(StreaksListRequest request,
      RequestOptions requestOptions) {
    return this.rawClient.list(request, requestOptions).body();
  }

  /**
   * Get the top users by streak length (active or longest).
   */
  public List<StreakRankingUser> rankings() {
    return this.rawClient.rankings().body();
  }

  /**
   * Get the top users by streak length (active or longest).
   */
  public List<StreakRankingUser> rankings(StreaksRankingsRequest request) {
    return this.rawClient.rankings(request).body();
  }

  /**
   * Get the top users by streak length (active or longest).
   */
  public List<StreakRankingUser> rankings(StreaksRankingsRequest request,
      RequestOptions requestOptions) {
    return this.rawClient.rankings(request, requestOptions).body();
  }
}
