package so.trophy.resources.leaderboards;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import so.trophy.core.ClientOptions;
import so.trophy.core.ObjectMappers;
import so.trophy.core.QueryStringMapper;
import so.trophy.core.RequestOptions;
import so.trophy.core.TrophyApiApiException;
import so.trophy.core.TrophyApiException;
import so.trophy.core.TrophyApiHttpResponse;
import so.trophy.errors.NotFoundError;
import so.trophy.errors.UnauthorizedError;
import so.trophy.errors.UnprocessableEntityError;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;
import so.trophy.resources.leaderboards.requests.LeaderboardsGetRequest;
import so.trophy.resources.leaderboards.types.LeaderboardsAllResponseItem;
import so.trophy.types.ErrorBody;
import so.trophy.types.LeaderboardResponseWithRankings;

public class AsyncRawLeaderboardsClient {
  protected final ClientOptions clientOptions;

  public AsyncRawLeaderboardsClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * Get all active leaderboards for your organization.
   */
  public CompletableFuture<TrophyApiHttpResponse<List<LeaderboardsAllResponseItem>>> all() {
    return all(null);
  }

  /**
   * Get all active leaderboards for your organization.
   */
  public CompletableFuture<TrophyApiHttpResponse<List<LeaderboardsAllResponseItem>>> all(
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getApiURL()).newBuilder()

      .addPathSegments("leaderboards")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<TrophyApiHttpResponse<List<LeaderboardsAllResponseItem>>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new TrophyApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), new TypeReference<List<LeaderboardsAllResponseItem>>() {}), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          try {
            switch (response.code()) {
              case 401:future.completeExceptionally(new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response));
              return;
              case 422:future.completeExceptionally(new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response));
              return;
            }
          }
          catch (JsonProcessingException ignored) {
            // unable to map error response, throwing generic error
          }
          future.completeExceptionally(new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new TrophyApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new TrophyApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Get a specific leaderboard by its key.
   */
  public CompletableFuture<TrophyApiHttpResponse<LeaderboardResponseWithRankings>> get(String key) {
    return get(key,LeaderboardsGetRequest.builder().build());
  }

  /**
   * Get a specific leaderboard by its key.
   */
  public CompletableFuture<TrophyApiHttpResponse<LeaderboardResponseWithRankings>> get(String key,
      LeaderboardsGetRequest request) {
    return get(key,request,null);
  }

  /**
   * Get a specific leaderboard by its key.
   */
  public CompletableFuture<TrophyApiHttpResponse<LeaderboardResponseWithRankings>> get(String key,
      LeaderboardsGetRequest request, RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getApiURL()).newBuilder()

      .addPathSegments("leaderboards")
      .addPathSegment(key);if (request.getOffset().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "offset", request.getOffset().get(), false);
      }
      if (request.getLimit().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "limit", request.getLimit().get(), false);
      }
      if (request.getRun().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "run", request.getRun().get(), false);
      }
      if (request.getUserId().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "userId", request.getUserId().get(), false);
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Accept", "application/json");
      Request okhttpRequest = _requestBuilder.build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      CompletableFuture<TrophyApiHttpResponse<LeaderboardResponseWithRankings>> future = new CompletableFuture<>();
      client.newCall(okhttpRequest).enqueue(new Callback() {
        @Override
        public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
          try (ResponseBody responseBody = response.body()) {
            if (response.isSuccessful()) {
              future.complete(new TrophyApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), LeaderboardResponseWithRankings.class), response));
              return;
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
              switch (response.code()) {
                case 401:future.completeExceptionally(new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response));
                return;
                case 404:future.completeExceptionally(new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response));
                return;
                case 422:future.completeExceptionally(new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response));
                return;
              }
            }
            catch (JsonProcessingException ignored) {
              // unable to map error response, throwing generic error
            }
            future.completeExceptionally(new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
            return;
          }
          catch (IOException e) {
            future.completeExceptionally(new TrophyApiException("Network error executing HTTP request", e));
          }
        }

        @Override
        public void onFailure(@NotNull Call call, @NotNull IOException e) {
          future.completeExceptionally(new TrophyApiException("Network error executing HTTP request", e));
        }
      });
      return future;
    }
  }
