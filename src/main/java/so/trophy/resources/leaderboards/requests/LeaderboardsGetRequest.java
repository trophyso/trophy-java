package so.trophy.resources.leaderboards.requests;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = LeaderboardsGetRequest.Builder.class
)
public final class LeaderboardsGetRequest {
  private final Optional<Integer> offset;

  private final Optional<Integer> limit;

  private final Optional<String> run;

  private final Optional<String> userId;

  private final Optional<String> userAttributes;

  private final Map<String, Object> additionalProperties;

  private LeaderboardsGetRequest(Optional<Integer> offset, Optional<Integer> limit,
      Optional<String> run, Optional<String> userId, Optional<String> userAttributes,
      Map<String, Object> additionalProperties) {
    this.offset = offset;
    this.limit = limit;
    this.run = run;
    this.userId = userId;
    this.userAttributes = userAttributes;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Number of rankings to skip for pagination.
   */
  @JsonProperty("offset")
  public Optional<Integer> getOffset() {
    return offset;
  }

  /**
   * @return Maximum number of rankings to return.
   */
  @JsonProperty("limit")
  public Optional<Integer> getLimit() {
    return limit;
  }

  /**
   * @return Specific run date in YYYY-MM-DD format. If not provided, returns the current run.
   */
  @JsonProperty("run")
  public Optional<String> getRun() {
    return run;
  }

  /**
   * @return When provided, offset is relative to this user's position on the leaderboard. If the user is not found in the leaderboard, returns empty rankings array.
   */
  @JsonProperty("userId")
  public Optional<String> getUserId() {
    return userId;
  }

  /**
   * @return Attribute key and value to filter the rankings by, separated by a colon. This parameter is required, and only valid for leaderboards with a breakdown attribute.
   */
  @JsonProperty("userAttributes")
  public Optional<String> getUserAttributes() {
    return userAttributes;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof LeaderboardsGetRequest && equalTo((LeaderboardsGetRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(LeaderboardsGetRequest other) {
    return offset.equals(other.offset) && limit.equals(other.limit) && run.equals(other.run) && userId.equals(other.userId) && userAttributes.equals(other.userAttributes);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.offset, this.limit, this.run, this.userId, this.userAttributes);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> offset = Optional.empty();

    private Optional<Integer> limit = Optional.empty();

    private Optional<String> run = Optional.empty();

    private Optional<String> userId = Optional.empty();

    private Optional<String> userAttributes = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(LeaderboardsGetRequest other) {
      offset(other.getOffset());
      limit(other.getLimit());
      run(other.getRun());
      userId(other.getUserId());
      userAttributes(other.getUserAttributes());
      return this;
    }

    /**
     * <p>Number of rankings to skip for pagination.</p>
     */
    @JsonSetter(
        value = "offset",
        nulls = Nulls.SKIP
    )
    public Builder offset(Optional<Integer> offset) {
      this.offset = offset;
      return this;
    }

    public Builder offset(Integer offset) {
      this.offset = Optional.ofNullable(offset);
      return this;
    }

    /**
     * <p>Maximum number of rankings to return.</p>
     */
    @JsonSetter(
        value = "limit",
        nulls = Nulls.SKIP
    )
    public Builder limit(Optional<Integer> limit) {
      this.limit = limit;
      return this;
    }

    public Builder limit(Integer limit) {
      this.limit = Optional.ofNullable(limit);
      return this;
    }

    /**
     * <p>Specific run date in YYYY-MM-DD format. If not provided, returns the current run.</p>
     */
    @JsonSetter(
        value = "run",
        nulls = Nulls.SKIP
    )
    public Builder run(Optional<String> run) {
      this.run = run;
      return this;
    }

    public Builder run(String run) {
      this.run = Optional.ofNullable(run);
      return this;
    }

    /**
     * <p>When provided, offset is relative to this user's position on the leaderboard. If the user is not found in the leaderboard, returns empty rankings array.</p>
     */
    @JsonSetter(
        value = "userId",
        nulls = Nulls.SKIP
    )
    public Builder userId(Optional<String> userId) {
      this.userId = userId;
      return this;
    }

    public Builder userId(String userId) {
      this.userId = Optional.ofNullable(userId);
      return this;
    }

    /**
     * <p>Attribute key and value to filter the rankings by, separated by a colon. This parameter is required, and only valid for leaderboards with a breakdown attribute.</p>
     */
    @JsonSetter(
        value = "userAttributes",
        nulls = Nulls.SKIP
    )
    public Builder userAttributes(Optional<String> userAttributes) {
      this.userAttributes = userAttributes;
      return this;
    }

    public Builder userAttributes(String userAttributes) {
      this.userAttributes = Optional.ofNullable(userAttributes);
      return this;
    }

    public LeaderboardsGetRequest build() {
      return new LeaderboardsGetRequest(offset, limit, run, userId, userAttributes, additionalProperties);
    }
  }
}
