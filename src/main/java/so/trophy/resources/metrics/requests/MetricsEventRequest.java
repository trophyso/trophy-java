package so.trophy.resources.metrics.requests;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;
import so.trophy.types.UpsertedUser;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = MetricsEventRequest.Builder.class
)
public final class MetricsEventRequest {
  private final Optional<String> idempotencyKey;

  private final UpsertedUser user;

  private final double value;

  private final Optional<Map<String, String>> attributes;

  private final Map<String, Object> additionalProperties;

  private MetricsEventRequest(Optional<String> idempotencyKey, UpsertedUser user, double value,
      Optional<Map<String, String>> attributes, Map<String, Object> additionalProperties) {
    this.idempotencyKey = idempotencyKey;
    this.user = user;
    this.value = value;
    this.attributes = attributes;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The idempotency key for the event.
   */
  @JsonProperty("Idempotency-Key")
  public Optional<String> getIdempotencyKey() {
    return idempotencyKey;
  }

  /**
   * @return The user that triggered the event.
   */
  @JsonProperty("user")
  public UpsertedUser getUser() {
    return user;
  }

  /**
   * @return The value to add to the user's current total for the given metric.
   */
  @JsonProperty("value")
  public double getValue() {
    return value;
  }

  /**
   * @return Event attributes as key-value pairs. Keys must match existing event attributes set up in the Trophy dashboard.
   */
  @JsonProperty("attributes")
  public Optional<Map<String, String>> getAttributes() {
    return attributes;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof MetricsEventRequest && equalTo((MetricsEventRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(MetricsEventRequest other) {
    return idempotencyKey.equals(other.idempotencyKey) && user.equals(other.user) && value == other.value && attributes.equals(other.attributes);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.idempotencyKey, this.user, this.value, this.attributes);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UserStage builder() {
    return new Builder();
  }

  public interface UserStage {
    ValueStage user(@NotNull UpsertedUser user);

    Builder from(MetricsEventRequest other);
  }

  public interface ValueStage {
    _FinalStage value(double value);
  }

  public interface _FinalStage {
    MetricsEventRequest build();

    _FinalStage idempotencyKey(Optional<String> idempotencyKey);

    _FinalStage idempotencyKey(String idempotencyKey);

    _FinalStage attributes(Optional<Map<String, String>> attributes);

    _FinalStage attributes(Map<String, String> attributes);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UserStage, ValueStage, _FinalStage {
    private UpsertedUser user;

    private double value;

    private Optional<Map<String, String>> attributes = Optional.empty();

    private Optional<String> idempotencyKey = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(MetricsEventRequest other) {
      idempotencyKey(other.getIdempotencyKey());
      user(other.getUser());
      value(other.getValue());
      attributes(other.getAttributes());
      return this;
    }

    /**
     * <p>The user that triggered the event.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("user")
    public ValueStage user(@NotNull UpsertedUser user) {
      this.user = Objects.requireNonNull(user, "user must not be null");
      return this;
    }

    /**
     * <p>The value to add to the user's current total for the given metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("value")
    public _FinalStage value(double value) {
      this.value = value;
      return this;
    }

    /**
     * <p>Event attributes as key-value pairs. Keys must match existing event attributes set up in the Trophy dashboard.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage attributes(Map<String, String> attributes) {
      this.attributes = Optional.ofNullable(attributes);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "attributes",
        nulls = Nulls.SKIP
    )
    public _FinalStage attributes(Optional<Map<String, String>> attributes) {
      this.attributes = attributes;
      return this;
    }

    /**
     * <p>The idempotency key for the event.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage idempotencyKey(String idempotencyKey) {
      this.idempotencyKey = Optional.ofNullable(idempotencyKey);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "Idempotency-Key",
        nulls = Nulls.SKIP
    )
    public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
      this.idempotencyKey = idempotencyKey;
      return this;
    }

    @java.lang.Override
    public MetricsEventRequest build() {
      return new MetricsEventRequest(idempotencyKey, user, value, attributes, additionalProperties);
    }
  }
}
