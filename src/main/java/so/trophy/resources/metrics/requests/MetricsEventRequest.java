package so.trophy.so.trophy.resources.metrics.requests;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;
import types.EventRequestUser;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = MetricsEventRequest.Builder.class
)
public final class MetricsEventRequest {
  private final EventRequestUser user;

  private final double value;

  private final Map<String, Object> additionalProperties;

  private MetricsEventRequest(EventRequestUser user, double value,
      Map<String, Object> additionalProperties) {
    this.user = user;
    this.value = value;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The user that triggered the event.
   */
  @JsonProperty("user")
  public EventRequestUser getUser() {
    return user;
  }

  /**
   * @return The value to add to the user's current total for the given metric.
   */
  @JsonProperty("value")
  public double getValue() {
    return value;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof MetricsEventRequest && equalTo((MetricsEventRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(MetricsEventRequest other) {
    return user.equals(other.user) && value == other.value;
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.user, this.value);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UserStage builder() {
    return new Builder();
  }

  public interface UserStage {
    ValueStage user(@NotNull EventRequestUser user);

    Builder from(MetricsEventRequest other);
  }

  public interface ValueStage {
    _FinalStage value(double value);
  }

  public interface _FinalStage {
    MetricsEventRequest build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UserStage, ValueStage, _FinalStage {
    private EventRequestUser user;

    private double value;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(MetricsEventRequest other) {
      user(other.getUser());
      value(other.getValue());
      return this;
    }

    /**
     * <p>The user that triggered the event.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("user")
    public ValueStage user(@NotNull EventRequestUser user) {
      this.user = Objects.requireNonNull(user, "user must not be null");
      return this;
    }

    /**
     * <p>The value to add to the user's current total for the given metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("value")
    public _FinalStage value(double value) {
      this.value = value;
      return this;
    }

    @java.lang.Override
    public MetricsEventRequest build() {
      return new MetricsEventRequest(user, value, additionalProperties);
    }
  }
}
