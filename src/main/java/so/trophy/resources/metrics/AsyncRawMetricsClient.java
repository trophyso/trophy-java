package so.trophy.resources.metrics;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.core.JsonProcessingException;
import so.trophy.core.ClientOptions;
import so.trophy.core.MediaTypes;
import so.trophy.core.ObjectMappers;
import so.trophy.core.RequestOptions;
import so.trophy.core.TrophyApiApiException;
import so.trophy.core.TrophyApiException;
import so.trophy.core.TrophyApiHttpResponse;
import so.trophy.errors.BadRequestError;
import so.trophy.errors.UnauthorizedError;
import so.trophy.errors.UnprocessableEntityError;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;
import so.trophy.resources.metrics.requests.MetricsEventRequest;
import so.trophy.types.ErrorBody;
import so.trophy.types.EventResponse;

public class AsyncRawMetricsClient {
  protected final ClientOptions clientOptions;

  public AsyncRawMetricsClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * Increment or decrement the value of a metric for a user.
   */
  public CompletableFuture<TrophyApiHttpResponse<EventResponse>> event(String key,
      MetricsEventRequest request) {
    return event(key,request,null);
  }

  /**
   * Increment or decrement the value of a metric for a user.
   */
  public CompletableFuture<TrophyApiHttpResponse<EventResponse>> event(String key,
      MetricsEventRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getApiURL()).newBuilder()

      .addPathSegments("metrics")
      .addPathSegment(key)
      .addPathSegments("event")
      .build();
    Map<String, Object> properties = new HashMap<>();
    properties.put("user", request.getUser());
    properties.put("value", request.getValue());
    if (request.getAttributes().isPresent()) {
      properties.put("attributes", request.getAttributes());
    }
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json");
    if (request.getIdempotencyKey().isPresent()) {
      _requestBuilder.addHeader("Idempotency-Key", request.getIdempotencyKey().get());
    }
    Request okhttpRequest = _requestBuilder.build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<TrophyApiHttpResponse<EventResponse>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new TrophyApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), EventResponse.class), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          try {
            switch (response.code()) {
              case 400:future.completeExceptionally(new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response));
              return;
              case 401:future.completeExceptionally(new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response));
              return;
              case 422:future.completeExceptionally(new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response));
              return;
            }
          }
          catch (JsonProcessingException ignored) {
            // unable to map error response, throwing generic error
          }
          future.completeExceptionally(new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new TrophyApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new TrophyApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }
}
