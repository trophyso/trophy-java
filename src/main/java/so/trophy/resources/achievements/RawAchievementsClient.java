package so.trophy.resources.achievements;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import so.trophy.core.ClientOptions;
import so.trophy.core.MediaTypes;
import so.trophy.core.ObjectMappers;
import so.trophy.core.QueryStringMapper;
import so.trophy.core.RequestOptions;
import so.trophy.core.TrophyApiApiException;
import so.trophy.core.TrophyApiException;
import so.trophy.core.TrophyApiHttpResponse;
import so.trophy.errors.NotFoundError;
import so.trophy.errors.UnauthorizedError;
import so.trophy.errors.UnprocessableEntityError;
import java.io.IOException;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import so.trophy.resources.achievements.requests.AchievementsAllRequest;
import so.trophy.resources.achievements.requests.AchievementsCompleteRequest;
import so.trophy.types.AchievementCompletionResponse;
import so.trophy.types.AchievementWithStatsResponse;
import so.trophy.types.ErrorBody;

public class RawAchievementsClient {
  protected final ClientOptions clientOptions;

  public RawAchievementsClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * Get all achievements and their completion stats.
   */
  public TrophyApiHttpResponse<List<AchievementWithStatsResponse>> all() {
    return all(AchievementsAllRequest.builder().build());
  }

  /**
   * Get all achievements and their completion stats.
   */
  public TrophyApiHttpResponse<List<AchievementWithStatsResponse>> all(
      AchievementsAllRequest request) {
    return all(request,null);
  }

  /**
   * Get all achievements and their completion stats.
   */
  public TrophyApiHttpResponse<List<AchievementWithStatsResponse>> all(
      AchievementsAllRequest request, RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getApiURL()).newBuilder()

      .addPathSegments("achievements");if (request.getUserAttributes().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "userAttributes", request.getUserAttributes().get(), false);
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Accept", "application/json");
      Request okhttpRequest = _requestBuilder.build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      try (Response response = client.newCall(okhttpRequest).execute()) {
        ResponseBody responseBody = response.body();
        if (response.isSuccessful()) {
          return new TrophyApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), new TypeReference<List<AchievementWithStatsResponse>>() {}), response);
        }
        String responseBodyString = responseBody != null ? responseBody.string() : "{}";
        try {
          switch (response.code()) {
            case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
            case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
          }
        }
        catch (JsonProcessingException ignored) {
          // unable to map error response, throwing generic error
        }
        throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
      }
      catch (IOException e) {
        throw new TrophyApiException("Network error executing HTTP request", e);
      }
    }

    /**
     * Mark an achievement as completed for a user.
     */
    public TrophyApiHttpResponse<AchievementCompletionResponse> complete(String key,
        AchievementsCompleteRequest request) {
      return complete(key,request,null);
    }

    /**
     * Mark an achievement as completed for a user.
     */
    public TrophyApiHttpResponse<AchievementCompletionResponse> complete(String key,
        AchievementsCompleteRequest request, RequestOptions requestOptions) {
      HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getApiURL()).newBuilder()

        .addPathSegments("achievements")
        .addPathSegment(key)
        .addPathSegments("complete")
        .build();
      RequestBody body;
      try {
        body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
      }
      catch(JsonProcessingException e) {
        throw new TrophyApiException("Failed to serialize request", e);
      }
      Request okhttpRequest = new Request.Builder()
        .url(httpUrl)
        .method("POST", body)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .addHeader("Accept", "application/json")
        .build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      try (Response response = client.newCall(okhttpRequest).execute()) {
        ResponseBody responseBody = response.body();
        if (response.isSuccessful()) {
          return new TrophyApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), AchievementCompletionResponse.class), response);
        }
        String responseBodyString = responseBody != null ? responseBody.string() : "{}";
        try {
          switch (response.code()) {
            case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
            case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
            case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
          }
        }
        catch (JsonProcessingException ignored) {
          // unable to map error response, throwing generic error
        }
        throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
      }
      catch (IOException e) {
        throw new TrophyApiException("Network error executing HTTP request", e);
      }
    }
  }
