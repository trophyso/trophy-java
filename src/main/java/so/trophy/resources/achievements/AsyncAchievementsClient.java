package so.trophy.resources.achievements;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import so.trophy.core.ClientOptions;
import so.trophy.core.RequestOptions;
import java.lang.String;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import so.trophy.resources.achievements.requests.AchievementsAllRequest;
import so.trophy.resources.achievements.requests.AchievementsCompleteRequest;
import so.trophy.types.AchievementCompletionResponse;
import so.trophy.types.AchievementWithStatsResponse;

public class AsyncAchievementsClient {
  protected final ClientOptions clientOptions;

  private final AsyncRawAchievementsClient rawClient;

  public AsyncAchievementsClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.rawClient = new AsyncRawAchievementsClient(clientOptions);
  }

  /**
   * Get responses with HTTP metadata like headers
   */
  public AsyncRawAchievementsClient withRawResponse() {
    return this.rawClient;
  }

  /**
   * Get all achievements and their completion stats.
   */
  public CompletableFuture<List<AchievementWithStatsResponse>> all() {
    return this.rawClient.all().thenApply(response -> response.body());
  }

  /**
   * Get all achievements and their completion stats.
   */
  public CompletableFuture<List<AchievementWithStatsResponse>> all(AchievementsAllRequest request) {
    return this.rawClient.all(request).thenApply(response -> response.body());
  }

  /**
   * Get all achievements and their completion stats.
   */
  public CompletableFuture<List<AchievementWithStatsResponse>> all(AchievementsAllRequest request,
      RequestOptions requestOptions) {
    return this.rawClient.all(request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Mark an achievement as completed for a user.
   */
  public CompletableFuture<AchievementCompletionResponse> complete(String key,
      AchievementsCompleteRequest request) {
    return this.rawClient.complete(key, request).thenApply(response -> response.body());
  }

  /**
   * Mark an achievement as completed for a user.
   */
  public CompletableFuture<AchievementCompletionResponse> complete(String key,
      AchievementsCompleteRequest request, RequestOptions requestOptions) {
    return this.rawClient.complete(key, request, requestOptions).thenApply(response -> response.body());
  }
}
