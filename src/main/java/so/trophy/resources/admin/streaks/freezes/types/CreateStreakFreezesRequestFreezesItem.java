package so.trophy.resources.admin.streaks.freezes.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = CreateStreakFreezesRequestFreezesItem.Builder.class
)
public final class CreateStreakFreezesRequestFreezesItem {
  private final String userId;

  private final Map<String, Object> additionalProperties;

  private CreateStreakFreezesRequestFreezesItem(String userId,
      Map<String, Object> additionalProperties) {
    this.userId = userId;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The ID of the user to create a freeze for.
   */
  @JsonProperty("userId")
  public String getUserId() {
    return userId;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreateStreakFreezesRequestFreezesItem && equalTo((CreateStreakFreezesRequestFreezesItem) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(CreateStreakFreezesRequestFreezesItem other) {
    return userId.equals(other.userId);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.userId);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UserIdStage builder() {
    return new Builder();
  }

  public interface UserIdStage {
    _FinalStage userId(@NotNull String userId);

    Builder from(CreateStreakFreezesRequestFreezesItem other);
  }

  public interface _FinalStage {
    CreateStreakFreezesRequestFreezesItem build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UserIdStage, _FinalStage {
    private String userId;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(CreateStreakFreezesRequestFreezesItem other) {
      userId(other.getUserId());
      return this;
    }

    /**
     * <p>The ID of the user to create a freeze for.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("userId")
    public _FinalStage userId(@NotNull String userId) {
      this.userId = Objects.requireNonNull(userId, "userId must not be null");
      return this;
    }

    @java.lang.Override
    public CreateStreakFreezesRequestFreezesItem build() {
      return new CreateStreakFreezesRequestFreezesItem(userId, additionalProperties);
    }
  }
}
