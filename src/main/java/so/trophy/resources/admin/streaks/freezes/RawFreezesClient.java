package so.trophy.resources.admin.streaks.freezes;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.core.JsonProcessingException;
import so.trophy.core.ClientOptions;
import so.trophy.core.MediaTypes;
import so.trophy.core.ObjectMappers;
import so.trophy.core.RequestOptions;
import so.trophy.core.TrophyApiApiException;
import so.trophy.core.TrophyApiException;
import so.trophy.core.TrophyApiHttpResponse;
import so.trophy.errors.BadRequestError;
import so.trophy.errors.UnauthorizedError;
import so.trophy.errors.UnprocessableEntityError;
import java.io.IOException;
import java.lang.Object;
import java.lang.String;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import so.trophy.resources.admin.streaks.freezes.requests.CreateStreakFreezesRequest;
import so.trophy.types.CreateStreakFreezesResponse;
import so.trophy.types.ErrorBody;

public class RawFreezesClient {
  protected final ClientOptions clientOptions;

  public RawFreezesClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * Create streak freezes for multiple users.
   */
  public TrophyApiHttpResponse<CreateStreakFreezesResponse> create(
      CreateStreakFreezesRequest request) {
    return create(request,null);
  }

  /**
   * Create streak freezes for multiple users.
   */
  public TrophyApiHttpResponse<CreateStreakFreezesResponse> create(
      CreateStreakFreezesRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getAdminURL()).newBuilder()

      .addPathSegments("streaks/freezes")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new TrophyApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return new TrophyApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CreateStreakFreezesResponse.class), response);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
    }
    catch (IOException e) {
      throw new TrophyApiException("Network error executing HTTP request", e);
    }
  }
}
