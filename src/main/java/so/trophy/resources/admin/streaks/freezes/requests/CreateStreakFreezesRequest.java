package so.trophy.resources.admin.streaks.freezes.requests;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import so.trophy.resources.admin.streaks.freezes.types.CreateStreakFreezesRequestFreezesItem;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = CreateStreakFreezesRequest.Builder.class
)
public final class CreateStreakFreezesRequest {
  private final List<CreateStreakFreezesRequestFreezesItem> freezes;

  private final Map<String, Object> additionalProperties;

  private CreateStreakFreezesRequest(List<CreateStreakFreezesRequestFreezesItem> freezes,
      Map<String, Object> additionalProperties) {
    this.freezes = freezes;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Array of freezes to create. Maximum 1,000 freezes per request.
   */
  @JsonProperty("freezes")
  public List<CreateStreakFreezesRequestFreezesItem> getFreezes() {
    return freezes;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreateStreakFreezesRequest && equalTo((CreateStreakFreezesRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(CreateStreakFreezesRequest other) {
    return freezes.equals(other.freezes);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.freezes);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private List<CreateStreakFreezesRequestFreezesItem> freezes = new ArrayList<>();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(CreateStreakFreezesRequest other) {
      freezes(other.getFreezes());
      return this;
    }

    /**
     * <p>Array of freezes to create. Maximum 1,000 freezes per request.</p>
     */
    @JsonSetter(
        value = "freezes",
        nulls = Nulls.SKIP
    )
    public Builder freezes(List<CreateStreakFreezesRequestFreezesItem> freezes) {
      this.freezes.clear();
      this.freezes.addAll(freezes);
      return this;
    }

    public Builder addFreezes(CreateStreakFreezesRequestFreezesItem freezes) {
      this.freezes.add(freezes);
      return this;
    }

    public Builder addAllFreezes(List<CreateStreakFreezesRequestFreezesItem> freezes) {
      if (freezes != null) {
        this.freezes.addAll(freezes);
      }
      return this;
    }

    public CreateStreakFreezesRequest build() {
      return new CreateStreakFreezesRequest(freezes, additionalProperties);
    }
  }
}
