package so.trophy.resources.users;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import so.trophy.core.ClientOptions;
import so.trophy.core.RequestOptions;
import java.lang.String;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import so.trophy.resources.users.requests.UsersAchievementsRequest;
import so.trophy.resources.users.requests.UsersLeaderboardRequest;
import so.trophy.resources.users.requests.UsersMetricEventSummaryRequest;
import so.trophy.resources.users.requests.UsersPointsEventSummaryRequest;
import so.trophy.resources.users.requests.UsersPointsRequest;
import so.trophy.resources.users.requests.UsersStreakRequest;
import so.trophy.resources.users.types.UsersMetricEventSummaryResponseItem;
import so.trophy.resources.users.types.UsersPointsEventSummaryResponseItem;
import so.trophy.types.CompletedAchievementResponse;
import so.trophy.types.GetUserPointsResponse;
import so.trophy.types.MetricResponse;
import so.trophy.types.StreakResponse;
import so.trophy.types.UpdatedUser;
import so.trophy.types.UpsertedUser;
import so.trophy.types.User;
import so.trophy.types.UserLeaderboardResponseWithHistory;

public class AsyncUsersClient {
  protected final ClientOptions clientOptions;

  private final AsyncRawUsersClient rawClient;

  public AsyncUsersClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.rawClient = new AsyncRawUsersClient(clientOptions);
  }

  /**
   * Get responses with HTTP metadata like headers
   */
  public AsyncRawUsersClient withRawResponse() {
    return this.rawClient;
  }

  /**
   * Create a new user.
   */
  public CompletableFuture<User> create(UpsertedUser request) {
    return this.rawClient.create(request).thenApply(response -> response.body());
  }

  /**
   * Create a new user.
   */
  public CompletableFuture<User> create(UpsertedUser request, RequestOptions requestOptions) {
    return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Get a single user.
   */
  public CompletableFuture<User> get(String id) {
    return this.rawClient.get(id).thenApply(response -> response.body());
  }

  /**
   * Get a single user.
   */
  public CompletableFuture<User> get(String id, RequestOptions requestOptions) {
    return this.rawClient.get(id, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Identify a user.
   */
  public CompletableFuture<User> identify(String id, UpdatedUser request) {
    return this.rawClient.identify(id, request).thenApply(response -> response.body());
  }

  /**
   * Identify a user.
   */
  public CompletableFuture<User> identify(String id, UpdatedUser request,
      RequestOptions requestOptions) {
    return this.rawClient.identify(id, request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Update a user.
   */
  public CompletableFuture<User> update(String id, UpdatedUser request) {
    return this.rawClient.update(id, request).thenApply(response -> response.body());
  }

  /**
   * Update a user.
   */
  public CompletableFuture<User> update(String id, UpdatedUser request,
      RequestOptions requestOptions) {
    return this.rawClient.update(id, request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Get a single user's progress against all active metrics.
   */
  public CompletableFuture<List<MetricResponse>> allMetrics(String id) {
    return this.rawClient.allMetrics(id).thenApply(response -> response.body());
  }

  /**
   * Get a single user's progress against all active metrics.
   */
  public CompletableFuture<List<MetricResponse>> allMetrics(String id,
      RequestOptions requestOptions) {
    return this.rawClient.allMetrics(id, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Get a user's progress against a single active metric.
   */
  public CompletableFuture<MetricResponse> singleMetric(String id, String key) {
    return this.rawClient.singleMetric(id, key).thenApply(response -> response.body());
  }

  /**
   * Get a user's progress against a single active metric.
   */
  public CompletableFuture<MetricResponse> singleMetric(String id, String key,
      RequestOptions requestOptions) {
    return this.rawClient.singleMetric(id, key, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Get a summary of metric events over time for a user.
   */
  public CompletableFuture<List<UsersMetricEventSummaryResponseItem>> metricEventSummary(String id,
      String key, UsersMetricEventSummaryRequest request) {
    return this.rawClient.metricEventSummary(id, key, request).thenApply(response -> response.body());
  }

  /**
   * Get a summary of metric events over time for a user.
   */
  public CompletableFuture<List<UsersMetricEventSummaryResponseItem>> metricEventSummary(String id,
      String key, UsersMetricEventSummaryRequest request, RequestOptions requestOptions) {
    return this.rawClient.metricEventSummary(id, key, request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Get a user's achievements.
   */
  public CompletableFuture<List<CompletedAchievementResponse>> achievements(String id) {
    return this.rawClient.achievements(id).thenApply(response -> response.body());
  }

  /**
   * Get a user's achievements.
   */
  public CompletableFuture<List<CompletedAchievementResponse>> achievements(String id,
      UsersAchievementsRequest request) {
    return this.rawClient.achievements(id, request).thenApply(response -> response.body());
  }

  /**
   * Get a user's achievements.
   */
  public CompletableFuture<List<CompletedAchievementResponse>> achievements(String id,
      UsersAchievementsRequest request, RequestOptions requestOptions) {
    return this.rawClient.achievements(id, request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Get a user's streak data.
   */
  public CompletableFuture<StreakResponse> streak(String id) {
    return this.rawClient.streak(id).thenApply(response -> response.body());
  }

  /**
   * Get a user's streak data.
   */
  public CompletableFuture<StreakResponse> streak(String id, UsersStreakRequest request) {
    return this.rawClient.streak(id, request).thenApply(response -> response.body());
  }

  /**
   * Get a user's streak data.
   */
  public CompletableFuture<StreakResponse> streak(String id, UsersStreakRequest request,
      RequestOptions requestOptions) {
    return this.rawClient.streak(id, request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Get a user's points for a specific points system.
   */
  public CompletableFuture<GetUserPointsResponse> points(String id, String key) {
    return this.rawClient.points(id, key).thenApply(response -> response.body());
  }

  /**
   * Get a user's points for a specific points system.
   */
  public CompletableFuture<GetUserPointsResponse> points(String id, String key,
      UsersPointsRequest request) {
    return this.rawClient.points(id, key, request).thenApply(response -> response.body());
  }

  /**
   * Get a user's points for a specific points system.
   */
  public CompletableFuture<GetUserPointsResponse> points(String id, String key,
      UsersPointsRequest request, RequestOptions requestOptions) {
    return this.rawClient.points(id, key, request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Get a summary of points awards over time for a user for a specific points system.
   */
  public CompletableFuture<List<UsersPointsEventSummaryResponseItem>> pointsEventSummary(String id,
      String key, UsersPointsEventSummaryRequest request) {
    return this.rawClient.pointsEventSummary(id, key, request).thenApply(response -> response.body());
  }

  /**
   * Get a summary of points awards over time for a user for a specific points system.
   */
  public CompletableFuture<List<UsersPointsEventSummaryResponseItem>> pointsEventSummary(String id,
      String key, UsersPointsEventSummaryRequest request, RequestOptions requestOptions) {
    return this.rawClient.pointsEventSummary(id, key, request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Get a user's rank, value, and history for a specific leaderboard.
   */
  public CompletableFuture<UserLeaderboardResponseWithHistory> leaderboard(String id, String key) {
    return this.rawClient.leaderboard(id, key).thenApply(response -> response.body());
  }

  /**
   * Get a user's rank, value, and history for a specific leaderboard.
   */
  public CompletableFuture<UserLeaderboardResponseWithHistory> leaderboard(String id, String key,
      UsersLeaderboardRequest request) {
    return this.rawClient.leaderboard(id, key, request).thenApply(response -> response.body());
  }

  /**
   * Get a user's rank, value, and history for a specific leaderboard.
   */
  public CompletableFuture<UserLeaderboardResponseWithHistory> leaderboard(String id, String key,
      UsersLeaderboardRequest request, RequestOptions requestOptions) {
    return this.rawClient.leaderboard(id, key, request, requestOptions).thenApply(response -> response.body());
  }
}
