package so.trophy.resources.users;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import so.trophy.core.ClientOptions;
import so.trophy.core.MediaTypes;
import so.trophy.core.ObjectMappers;
import so.trophy.core.RequestOptions;
import so.trophy.core.TrophyApiApiException;
import so.trophy.core.TrophyApiException;
import so.trophy.errors.BadRequestError;
import so.trophy.errors.NotFoundError;
import so.trophy.errors.UnauthorizedError;
import so.trophy.errors.UnprocessableEntityError;
import java.io.IOException;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import so.trophy.resources.users.requests.UsersAchievementsRequest;
import so.trophy.resources.users.requests.UsersLeaderboardsRequest;
import so.trophy.resources.users.requests.UsersMetricEventSummaryRequest;
import so.trophy.resources.users.requests.UsersPointsEventSummaryRequest;
import so.trophy.resources.users.requests.UsersPointsRequest;
import so.trophy.resources.users.requests.UsersStreakRequest;
import so.trophy.resources.users.types.UsersMetricEventSummaryResponseItem;
import so.trophy.resources.users.types.UsersPointsEventSummaryResponseItem;
import so.trophy.types.CompletedAchievementResponse;
import so.trophy.types.ErrorBody;
import so.trophy.types.GetUserPointsResponse;
import so.trophy.types.MetricResponse;
import so.trophy.types.StreakResponse;
import so.trophy.types.UpdatedUser;
import so.trophy.types.UpsertedUser;
import so.trophy.types.User;
import so.trophy.types.UserLeaderboardResponse;

public class UsersClient {
  protected final ClientOptions clientOptions;

  public UsersClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * Create a new user.
   */
  public User create(UpsertedUser request) {
    return create(request,null);
  }

  /**
   * Create a new user.
   */
  public User create(UpsertedUser request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new TrophyApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), User.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new TrophyApiException("Network error executing HTTP request", e);
    }
  }

  /**
   * Get a single user.
   */
  public User get(String id) {
    return get(id,null);
  }

  /**
   * Get a single user.
   */
  public User get(String id, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(id)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), User.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new TrophyApiException("Network error executing HTTP request", e);
    }
  }

  /**
   * Identify a user.
   */
  public User identify(String id) {
    return identify(id,UpdatedUser.builder().build());
  }

  /**
   * Identify a user.
   */
  public User identify(String id, UpdatedUser request) {
    return identify(id,request,null);
  }

  /**
   * Identify a user.
   */
  public User identify(String id, UpdatedUser request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(id)
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new TrophyApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("PUT", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), User.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new TrophyApiException("Network error executing HTTP request", e);
    }
  }

  /**
   * Update a user.
   */
  public User update(String id) {
    return update(id,UpdatedUser.builder().build());
  }

  /**
   * Update a user.
   */
  public User update(String id, UpdatedUser request) {
    return update(id,request,null);
  }

  /**
   * Update a user.
   */
  public User update(String id, UpdatedUser request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(id)
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new TrophyApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("PATCH", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), User.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new BadRequestError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new TrophyApiException("Network error executing HTTP request", e);
    }
  }

  /**
   * Get a single user's progress against all active metrics.
   */
  public List<MetricResponse> allMetrics(String id) {
    return allMetrics(id,null);
  }

  /**
   * Get a single user's progress against all active metrics.
   */
  public List<MetricResponse> allMetrics(String id, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(id)
      .addPathSegments("metrics")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), new TypeReference<List<MetricResponse>>() {});
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new TrophyApiException("Network error executing HTTP request", e);
    }
  }

  /**
   * Get a user's progress against a single active metric.
   */
  public MetricResponse singleMetric(String id, String key) {
    return singleMetric(id,key,null);
  }

  /**
   * Get a user's progress against a single active metric.
   */
  public MetricResponse singleMetric(String id, String key, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(id)
      .addPathSegments("metrics")
      .addPathSegment(key)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), MetricResponse.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new TrophyApiException("Network error executing HTTP request", e);
    }
  }

  /**
   * Get a summary of metric events over time for a user.
   */
  public List<UsersMetricEventSummaryResponseItem> metricEventSummary(String id, String key,
      UsersMetricEventSummaryRequest request) {
    return metricEventSummary(id,key,request,null);
  }

  /**
   * Get a summary of metric events over time for a user.
   */
  public List<UsersMetricEventSummaryResponseItem> metricEventSummary(String id, String key,
      UsersMetricEventSummaryRequest request, RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("users")
      .addPathSegment(id)
      .addPathSegments("metrics")
      .addPathSegment(key)
      .addPathSegments("event-summary");httpUrl.addQueryParameter("aggregation", request.getAggregation().toString());
      httpUrl.addQueryParameter("startDate", request.getStartDate());
      httpUrl.addQueryParameter("endDate", request.getEndDate());
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json").addHeader("Accept", "application/json");
      Request okhttpRequest = _requestBuilder.build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      try (Response response = client.newCall(okhttpRequest).execute()) {
        ResponseBody responseBody = response.body();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), new TypeReference<List<UsersMetricEventSummaryResponseItem>>() {});
        }
        String responseBodyString = responseBody != null ? responseBody.string() : "{}";
        try {
          switch (response.code()) {
            case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
            case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
            case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
          }
        }
        catch (JsonProcessingException ignored) {
          // unable to map error response, throwing generic error
        }
        throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
      }
      catch (IOException e) {
        throw new TrophyApiException("Network error executing HTTP request", e);
      }
    }

    /**
     * Get a user's achievements.
     */
    public List<CompletedAchievementResponse> achievements(String id) {
      return achievements(id,UsersAchievementsRequest.builder().build());
    }

    /**
     * Get a user's achievements.
     */
    public List<CompletedAchievementResponse> achievements(String id,
        UsersAchievementsRequest request) {
      return achievements(id,request,null);
    }

    /**
     * Get a user's achievements.
     */
    public List<CompletedAchievementResponse> achievements(String id,
        UsersAchievementsRequest request, RequestOptions requestOptions) {
      HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("users")
        .addPathSegment(id)
        .addPathSegments("achievements");if (request.getIncludeIncomplete().isPresent()) {
          httpUrl.addQueryParameter("includeIncomplete", request.getIncludeIncomplete().get());
        }
        Request.Builder _requestBuilder = new Request.Builder()
          .url(httpUrl.build())
          .method("GET", null)
          .headers(Headers.of(clientOptions.headers(requestOptions)))
          .addHeader("Content-Type", "application/json").addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
          client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
          ResponseBody responseBody = response.body();
          if (response.isSuccessful()) {
            return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), new TypeReference<List<CompletedAchievementResponse>>() {});
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          try {
            switch (response.code()) {
              case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
              case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
              case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
            }
          }
          catch (JsonProcessingException ignored) {
            // unable to map error response, throwing generic error
          }
          throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
        catch (IOException e) {
          throw new TrophyApiException("Network error executing HTTP request", e);
        }
      }

      /**
       * Get a user's streak data.
       */
      public StreakResponse streak(String id) {
        return streak(id,UsersStreakRequest.builder().build());
      }

      /**
       * Get a user's streak data.
       */
      public StreakResponse streak(String id, UsersStreakRequest request) {
        return streak(id,request,null);
      }

      /**
       * Get a user's streak data.
       */
      public StreakResponse streak(String id, UsersStreakRequest request,
          RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

          .addPathSegments("users")
          .addPathSegment(id)
          .addPathSegments("streak");if (request.getHistoryPeriods().isPresent()) {
            httpUrl.addQueryParameter("historyPeriods", request.getHistoryPeriods().get().toString());
          }
          Request.Builder _requestBuilder = new Request.Builder()
            .url(httpUrl.build())
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json").addHeader("Accept", "application/json");
          Request okhttpRequest = _requestBuilder.build();
          OkHttpClient client = clientOptions.httpClient();
          if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
          }
          try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), StreakResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
              switch (response.code()) {
                case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
                case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
                case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
              }
            }
            catch (JsonProcessingException ignored) {
              // unable to map error response, throwing generic error
            }
            throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          }
          catch (IOException e) {
            throw new TrophyApiException("Network error executing HTTP request", e);
          }
        }

        /**
         * Get a user's points for a specific points system.
         */
        public GetUserPointsResponse points(String id, String key) {
          return points(id,key,UsersPointsRequest.builder().build());
        }

        /**
         * Get a user's points for a specific points system.
         */
        public GetUserPointsResponse points(String id, String key, UsersPointsRequest request) {
          return points(id,key,request,null);
        }

        /**
         * Get a user's points for a specific points system.
         */
        public GetUserPointsResponse points(String id, String key, UsersPointsRequest request,
            RequestOptions requestOptions) {
          HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("users")
            .addPathSegment(id)
            .addPathSegments("points")
            .addPathSegment(key);if (request.getAwards().isPresent()) {
              httpUrl.addQueryParameter("awards", request.getAwards().get().toString());
            }
            Request.Builder _requestBuilder = new Request.Builder()
              .url(httpUrl.build())
              .method("GET", null)
              .headers(Headers.of(clientOptions.headers(requestOptions)))
              .addHeader("Content-Type", "application/json").addHeader("Accept", "application/json");
            Request okhttpRequest = _requestBuilder.build();
            OkHttpClient client = clientOptions.httpClient();
            if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
              client = clientOptions.httpClientWithTimeout(requestOptions);
            }
            try (Response response = client.newCall(okhttpRequest).execute()) {
              ResponseBody responseBody = response.body();
              if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetUserPointsResponse.class);
              }
              String responseBodyString = responseBody != null ? responseBody.string() : "{}";
              try {
                switch (response.code()) {
                  case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
                  case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
                  case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
                }
              }
              catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
              }
              throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
            }
            catch (IOException e) {
              throw new TrophyApiException("Network error executing HTTP request", e);
            }
          }

          /**
           * Get a summary of points awards over time for a user for a specific points system.
           */
          public List<UsersPointsEventSummaryResponseItem> pointsEventSummary(String id, String key,
              UsersPointsEventSummaryRequest request) {
            return pointsEventSummary(id,key,request,null);
          }

          /**
           * Get a summary of points awards over time for a user for a specific points system.
           */
          public List<UsersPointsEventSummaryResponseItem> pointsEventSummary(String id, String key,
              UsersPointsEventSummaryRequest request, RequestOptions requestOptions) {
            HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

              .addPathSegments("users")
              .addPathSegment(id)
              .addPathSegments("points")
              .addPathSegment(key)
              .addPathSegments("event-summary");httpUrl.addQueryParameter("aggregation", request.getAggregation().toString());
              httpUrl.addQueryParameter("startDate", request.getStartDate());
              httpUrl.addQueryParameter("endDate", request.getEndDate());
              Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json").addHeader("Accept", "application/json");
              Request okhttpRequest = _requestBuilder.build();
              OkHttpClient client = clientOptions.httpClient();
              if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
                client = clientOptions.httpClientWithTimeout(requestOptions);
              }
              try (Response response = client.newCall(okhttpRequest).execute()) {
                ResponseBody responseBody = response.body();
                if (response.isSuccessful()) {
                  return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), new TypeReference<List<UsersPointsEventSummaryResponseItem>>() {});
                }
                String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                try {
                  switch (response.code()) {
                    case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
                    case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
                    case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
                  }
                }
                catch (JsonProcessingException ignored) {
                  // unable to map error response, throwing generic error
                }
                throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
              }
              catch (IOException e) {
                throw new TrophyApiException("Network error executing HTTP request", e);
              }
            }

            /**
             * Get a user's rank, value, and history for a specific leaderboard.
             */
            public UserLeaderboardResponse leaderboards(String id, String key) {
              return leaderboards(id,key,UsersLeaderboardsRequest.builder().build());
            }

            /**
             * Get a user's rank, value, and history for a specific leaderboard.
             */
            public UserLeaderboardResponse leaderboards(String id, String key,
                UsersLeaderboardsRequest request) {
              return leaderboards(id,key,request,null);
            }

            /**
             * Get a user's rank, value, and history for a specific leaderboard.
             */
            public UserLeaderboardResponse leaderboards(String id, String key,
                UsersLeaderboardsRequest request, RequestOptions requestOptions) {
              HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

                .addPathSegments("users")
                .addPathSegment(id)
                .addPathSegments("leaderboards")
                .addPathSegment(key);if (request.getRun().isPresent()) {
                  httpUrl.addQueryParameter("run", request.getRun().get());
                }
                Request.Builder _requestBuilder = new Request.Builder()
                  .url(httpUrl.build())
                  .method("GET", null)
                  .headers(Headers.of(clientOptions.headers(requestOptions)))
                  .addHeader("Content-Type", "application/json").addHeader("Accept", "application/json");
                Request okhttpRequest = _requestBuilder.build();
                OkHttpClient client = clientOptions.httpClient();
                if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
                  client = clientOptions.httpClientWithTimeout(requestOptions);
                }
                try (Response response = client.newCall(okhttpRequest).execute()) {
                  ResponseBody responseBody = response.body();
                  if (response.isSuccessful()) {
                    return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UserLeaderboardResponse.class);
                  }
                  String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                  try {
                    switch (response.code()) {
                      case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
                      case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
                      case 422:throw new UnprocessableEntityError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class));
                    }
                  }
                  catch (JsonProcessingException ignored) {
                    // unable to map error response, throwing generic error
                  }
                  throw new TrophyApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
                }
                catch (IOException e) {
                  throw new TrophyApiException("Network error executing HTTP request", e);
                }
              }
            }
