package so.trophy.resources.users;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import so.trophy.core.ClientOptions;
import so.trophy.core.RequestOptions;
import java.lang.String;
import java.util.List;
import so.trophy.resources.users.requests.UsersAchievementsRequest;
import so.trophy.resources.users.requests.UsersLeaderboardRequest;
import so.trophy.resources.users.requests.UsersMetricEventSummaryRequest;
import so.trophy.resources.users.requests.UsersPointsEventSummaryRequest;
import so.trophy.resources.users.requests.UsersPointsRequest;
import so.trophy.resources.users.requests.UsersStreakRequest;
import so.trophy.resources.users.types.UsersMetricEventSummaryResponseItem;
import so.trophy.resources.users.types.UsersPointsEventSummaryResponseItem;
import so.trophy.types.CompletedAchievementResponse;
import so.trophy.types.GetUserPointsResponse;
import so.trophy.types.MetricResponse;
import so.trophy.types.StreakResponse;
import so.trophy.types.UpdatedUser;
import so.trophy.types.UpsertedUser;
import so.trophy.types.User;
import so.trophy.types.UserLeaderboardResponseWithHistory;

public class UsersClient {
  protected final ClientOptions clientOptions;

  private final RawUsersClient rawClient;

  public UsersClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.rawClient = new RawUsersClient(clientOptions);
  }

  /**
   * Get responses with HTTP metadata like headers
   */
  public RawUsersClient withRawResponse() {
    return this.rawClient;
  }

  /**
   * Create a new user.
   */
  public User create(UpsertedUser request) {
    return this.rawClient.create(request).body();
  }

  /**
   * Create a new user.
   */
  public User create(UpsertedUser request, RequestOptions requestOptions) {
    return this.rawClient.create(request, requestOptions).body();
  }

  /**
   * Get a single user.
   */
  public User get(String id) {
    return this.rawClient.get(id).body();
  }

  /**
   * Get a single user.
   */
  public User get(String id, RequestOptions requestOptions) {
    return this.rawClient.get(id, requestOptions).body();
  }

  /**
   * Identify a user.
   */
  public User identify(String id) {
    return this.rawClient.identify(id).body();
  }

  /**
   * Identify a user.
   */
  public User identify(String id, UpdatedUser request) {
    return this.rawClient.identify(id, request).body();
  }

  /**
   * Identify a user.
   */
  public User identify(String id, UpdatedUser request, RequestOptions requestOptions) {
    return this.rawClient.identify(id, request, requestOptions).body();
  }

  /**
   * Update a user.
   */
  public User update(String id) {
    return this.rawClient.update(id).body();
  }

  /**
   * Update a user.
   */
  public User update(String id, UpdatedUser request) {
    return this.rawClient.update(id, request).body();
  }

  /**
   * Update a user.
   */
  public User update(String id, UpdatedUser request, RequestOptions requestOptions) {
    return this.rawClient.update(id, request, requestOptions).body();
  }

  /**
   * Get a single user's progress against all active metrics.
   */
  public List<MetricResponse> allMetrics(String id) {
    return this.rawClient.allMetrics(id).body();
  }

  /**
   * Get a single user's progress against all active metrics.
   */
  public List<MetricResponse> allMetrics(String id, RequestOptions requestOptions) {
    return this.rawClient.allMetrics(id, requestOptions).body();
  }

  /**
   * Get a user's progress against a single active metric.
   */
  public MetricResponse singleMetric(String id, String key) {
    return this.rawClient.singleMetric(id, key).body();
  }

  /**
   * Get a user's progress against a single active metric.
   */
  public MetricResponse singleMetric(String id, String key, RequestOptions requestOptions) {
    return this.rawClient.singleMetric(id, key, requestOptions).body();
  }

  /**
   * Get a summary of metric events over time for a user.
   */
  public List<UsersMetricEventSummaryResponseItem> metricEventSummary(String id, String key,
      UsersMetricEventSummaryRequest request) {
    return this.rawClient.metricEventSummary(id, key, request).body();
  }

  /**
   * Get a summary of metric events over time for a user.
   */
  public List<UsersMetricEventSummaryResponseItem> metricEventSummary(String id, String key,
      UsersMetricEventSummaryRequest request, RequestOptions requestOptions) {
    return this.rawClient.metricEventSummary(id, key, request, requestOptions).body();
  }

  /**
   * Get a user's achievements.
   */
  public List<CompletedAchievementResponse> achievements(String id) {
    return this.rawClient.achievements(id).body();
  }

  /**
   * Get a user's achievements.
   */
  public List<CompletedAchievementResponse> achievements(String id,
      UsersAchievementsRequest request) {
    return this.rawClient.achievements(id, request).body();
  }

  /**
   * Get a user's achievements.
   */
  public List<CompletedAchievementResponse> achievements(String id,
      UsersAchievementsRequest request, RequestOptions requestOptions) {
    return this.rawClient.achievements(id, request, requestOptions).body();
  }

  /**
   * Get a user's streak data.
   */
  public StreakResponse streak(String id) {
    return this.rawClient.streak(id).body();
  }

  /**
   * Get a user's streak data.
   */
  public StreakResponse streak(String id, UsersStreakRequest request) {
    return this.rawClient.streak(id, request).body();
  }

  /**
   * Get a user's streak data.
   */
  public StreakResponse streak(String id, UsersStreakRequest request,
      RequestOptions requestOptions) {
    return this.rawClient.streak(id, request, requestOptions).body();
  }

  /**
   * Get a user's points for a specific points system.
   */
  public GetUserPointsResponse points(String id, String key) {
    return this.rawClient.points(id, key).body();
  }

  /**
   * Get a user's points for a specific points system.
   */
  public GetUserPointsResponse points(String id, String key, UsersPointsRequest request) {
    return this.rawClient.points(id, key, request).body();
  }

  /**
   * Get a user's points for a specific points system.
   */
  public GetUserPointsResponse points(String id, String key, UsersPointsRequest request,
      RequestOptions requestOptions) {
    return this.rawClient.points(id, key, request, requestOptions).body();
  }

  /**
   * Get a summary of points awards over time for a user for a specific points system.
   */
  public List<UsersPointsEventSummaryResponseItem> pointsEventSummary(String id, String key,
      UsersPointsEventSummaryRequest request) {
    return this.rawClient.pointsEventSummary(id, key, request).body();
  }

  /**
   * Get a summary of points awards over time for a user for a specific points system.
   */
  public List<UsersPointsEventSummaryResponseItem> pointsEventSummary(String id, String key,
      UsersPointsEventSummaryRequest request, RequestOptions requestOptions) {
    return this.rawClient.pointsEventSummary(id, key, request, requestOptions).body();
  }

  /**
   * Get a user's rank, value, and history for a specific leaderboard.
   */
  public UserLeaderboardResponseWithHistory leaderboard(String id, String key) {
    return this.rawClient.leaderboard(id, key).body();
  }

  /**
   * Get a user's rank, value, and history for a specific leaderboard.
   */
  public UserLeaderboardResponseWithHistory leaderboard(String id, String key,
      UsersLeaderboardRequest request) {
    return this.rawClient.leaderboard(id, key, request).body();
  }

  /**
   * Get a user's rank, value, and history for a specific leaderboard.
   */
  public UserLeaderboardResponseWithHistory leaderboard(String id, String key,
      UsersLeaderboardRequest request, RequestOptions requestOptions) {
    return this.rawClient.leaderboard(id, key, request, requestOptions).body();
  }
}
