package so.trophy.resources.users.requests;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UsersAchievementsRequest.Builder.class
)
public final class UsersAchievementsRequest {
  private final Optional<String> includeIncomplete;

  private final Map<String, Object> additionalProperties;

  private UsersAchievementsRequest(Optional<String> includeIncomplete,
      Map<String, Object> additionalProperties) {
    this.includeIncomplete = includeIncomplete;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return When set to 'true', returns both completed and incomplete achievements for the user. When omitted or set to any other value, returns only completed achievements.
   */
  @JsonProperty("includeIncomplete")
  public Optional<String> getIncludeIncomplete() {
    return includeIncomplete;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UsersAchievementsRequest && equalTo((UsersAchievementsRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UsersAchievementsRequest other) {
    return includeIncomplete.equals(other.includeIncomplete);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.includeIncomplete);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> includeIncomplete = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(UsersAchievementsRequest other) {
      includeIncomplete(other.getIncludeIncomplete());
      return this;
    }

    /**
     * <p>When set to 'true', returns both completed and incomplete achievements for the user. When omitted or set to any other value, returns only completed achievements.</p>
     */
    @JsonSetter(
        value = "includeIncomplete",
        nulls = Nulls.SKIP
    )
    public Builder includeIncomplete(Optional<String> includeIncomplete) {
      this.includeIncomplete = includeIncomplete;
      return this;
    }

    public Builder includeIncomplete(String includeIncomplete) {
      this.includeIncomplete = Optional.ofNullable(includeIncomplete);
      return this;
    }

    public UsersAchievementsRequest build() {
      return new UsersAchievementsRequest(includeIncomplete, additionalProperties);
    }
  }
}
