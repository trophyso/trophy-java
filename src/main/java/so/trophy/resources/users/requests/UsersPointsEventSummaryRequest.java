package so.trophy.resources.users.requests;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;
import so.trophy.resources.users.types.UsersPointsEventSummaryRequestAggregation;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UsersPointsEventSummaryRequest.Builder.class
)
public final class UsersPointsEventSummaryRequest {
  private final UsersPointsEventSummaryRequestAggregation aggregation;

  private final String startDate;

  private final String endDate;

  private final Map<String, Object> additionalProperties;

  private UsersPointsEventSummaryRequest(UsersPointsEventSummaryRequestAggregation aggregation,
      String startDate, String endDate, Map<String, Object> additionalProperties) {
    this.aggregation = aggregation;
    this.startDate = startDate;
    this.endDate = endDate;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The time period over which to aggregate the event data.
   */
  @JsonProperty("aggregation")
  public UsersPointsEventSummaryRequestAggregation getAggregation() {
    return aggregation;
  }

  /**
   * @return The start date for the data range in YYYY-MM-DD format. The startDate must be before the endDate, and the date range must not exceed 400 days.
   */
  @JsonProperty("startDate")
  public String getStartDate() {
    return startDate;
  }

  /**
   * @return The end date for the data range in YYYY-MM-DD format. The endDate must be after the startDate, and the date range must not exceed 400 days.
   */
  @JsonProperty("endDate")
  public String getEndDate() {
    return endDate;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UsersPointsEventSummaryRequest && equalTo((UsersPointsEventSummaryRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UsersPointsEventSummaryRequest other) {
    return aggregation.equals(other.aggregation) && startDate.equals(other.startDate) && endDate.equals(other.endDate);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.aggregation, this.startDate, this.endDate);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static AggregationStage builder() {
    return new Builder();
  }

  public interface AggregationStage {
    StartDateStage aggregation(@NotNull UsersPointsEventSummaryRequestAggregation aggregation);

    Builder from(UsersPointsEventSummaryRequest other);
  }

  public interface StartDateStage {
    EndDateStage startDate(@NotNull String startDate);
  }

  public interface EndDateStage {
    _FinalStage endDate(@NotNull String endDate);
  }

  public interface _FinalStage {
    UsersPointsEventSummaryRequest build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements AggregationStage, StartDateStage, EndDateStage, _FinalStage {
    private UsersPointsEventSummaryRequestAggregation aggregation;

    private String startDate;

    private String endDate;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(UsersPointsEventSummaryRequest other) {
      aggregation(other.getAggregation());
      startDate(other.getStartDate());
      endDate(other.getEndDate());
      return this;
    }

    /**
     * <p>The time period over which to aggregate the event data.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("aggregation")
    public StartDateStage aggregation(
        @NotNull UsersPointsEventSummaryRequestAggregation aggregation) {
      this.aggregation = Objects.requireNonNull(aggregation, "aggregation must not be null");
      return this;
    }

    /**
     * <p>The start date for the data range in YYYY-MM-DD format. The startDate must be before the endDate, and the date range must not exceed 400 days.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("startDate")
    public EndDateStage startDate(@NotNull String startDate) {
      this.startDate = Objects.requireNonNull(startDate, "startDate must not be null");
      return this;
    }

    /**
     * <p>The end date for the data range in YYYY-MM-DD format. The endDate must be after the startDate, and the date range must not exceed 400 days.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("endDate")
    public _FinalStage endDate(@NotNull String endDate) {
      this.endDate = Objects.requireNonNull(endDate, "endDate must not be null");
      return this;
    }

    @java.lang.Override
    public UsersPointsEventSummaryRequest build() {
      return new UsersPointsEventSummaryRequest(aggregation, startDate, endDate, additionalProperties);
    }
  }
}
