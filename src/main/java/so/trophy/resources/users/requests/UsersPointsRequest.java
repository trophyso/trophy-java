package so.trophy.resources.users.requests;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UsersPointsRequest.Builder.class
)
public final class UsersPointsRequest {
  private final Optional<Integer> awards;

  private final Map<String, Object> additionalProperties;

  private UsersPointsRequest(Optional<Integer> awards, Map<String, Object> additionalProperties) {
    this.awards = awards;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The number of recent point awards to return.
   */
  @JsonProperty("awards")
  public Optional<Integer> getAwards() {
    return awards;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UsersPointsRequest && equalTo((UsersPointsRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UsersPointsRequest other) {
    return awards.equals(other.awards);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.awards);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> awards = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(UsersPointsRequest other) {
      awards(other.getAwards());
      return this;
    }

    /**
     * <p>The number of recent point awards to return.</p>
     */
    @JsonSetter(
        value = "awards",
        nulls = Nulls.SKIP
    )
    public Builder awards(Optional<Integer> awards) {
      this.awards = awards;
      return this;
    }

    public Builder awards(Integer awards) {
      this.awards = Optional.ofNullable(awards);
      return this;
    }

    public UsersPointsRequest build() {
      return new UsersPointsRequest(awards, additionalProperties);
    }
  }
}
