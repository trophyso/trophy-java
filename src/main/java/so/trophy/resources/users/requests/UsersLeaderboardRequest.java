package so.trophy.resources.users.requests;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UsersLeaderboardRequest.Builder.class
)
public final class UsersLeaderboardRequest {
  private final Optional<String> run;

  private final Map<String, Object> additionalProperties;

  private UsersLeaderboardRequest(Optional<String> run, Map<String, Object> additionalProperties) {
    this.run = run;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Specific run date in YYYY-MM-DD format. If not provided, returns the current run.
   */
  @JsonProperty("run")
  public Optional<String> getRun() {
    return run;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UsersLeaderboardRequest && equalTo((UsersLeaderboardRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UsersLeaderboardRequest other) {
    return run.equals(other.run);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.run);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> run = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(UsersLeaderboardRequest other) {
      run(other.getRun());
      return this;
    }

    /**
     * <p>Specific run date in YYYY-MM-DD format. If not provided, returns the current run.</p>
     */
    @JsonSetter(
        value = "run",
        nulls = Nulls.SKIP
    )
    public Builder run(Optional<String> run) {
      this.run = run;
      return this;
    }

    public Builder run(String run) {
      this.run = Optional.ofNullable(run);
      return this;
    }

    public UsersLeaderboardRequest build() {
      return new UsersLeaderboardRequest(run, additionalProperties);
    }
  }
}
