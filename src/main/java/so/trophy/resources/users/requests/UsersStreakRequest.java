package so.trophy.resources.users.requests;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UsersStreakRequest.Builder.class
)
public final class UsersStreakRequest {
  private final Optional<Integer> historyPeriods;

  private final Map<String, Object> additionalProperties;

  private UsersStreakRequest(Optional<Integer> historyPeriods,
      Map<String, Object> additionalProperties) {
    this.historyPeriods = historyPeriods;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The number of past streak periods to include in the streakHistory field of the  response.
   */
  @JsonProperty("historyPeriods")
  public Optional<Integer> getHistoryPeriods() {
    return historyPeriods;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UsersStreakRequest && equalTo((UsersStreakRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UsersStreakRequest other) {
    return historyPeriods.equals(other.historyPeriods);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.historyPeriods);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Integer> historyPeriods = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(UsersStreakRequest other) {
      historyPeriods(other.getHistoryPeriods());
      return this;
    }

    @JsonSetter(
        value = "historyPeriods",
        nulls = Nulls.SKIP
    )
    public Builder historyPeriods(Optional<Integer> historyPeriods) {
      this.historyPeriods = historyPeriods;
      return this;
    }

    public Builder historyPeriods(Integer historyPeriods) {
      this.historyPeriods = Optional.ofNullable(historyPeriods);
      return this;
    }

    public UsersStreakRequest build() {
      return new UsersStreakRequest(historyPeriods, additionalProperties);
    }
  }
}
