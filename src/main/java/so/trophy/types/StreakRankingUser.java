package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = StreakRankingUser.Builder.class
)
public final class StreakRankingUser {
  private final String userId;

  private final Optional<String> name;

  private final int streakLength;

  private final Map<String, Object> additionalProperties;

  private StreakRankingUser(String userId, Optional<String> name, int streakLength,
      Map<String, Object> additionalProperties) {
    this.userId = userId;
    this.name = name;
    this.streakLength = streakLength;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The ID of the user.
   */
  @JsonProperty("userId")
  public String getUserId() {
    return userId;
  }

  /**
   * @return The name of the user. May be null if no name is set.
   */
  @JsonProperty("name")
  public Optional<String> getName() {
    return name;
  }

  /**
   * @return The user's streak length (active or longest depending on query parameter).
   */
  @JsonProperty("streakLength")
  public int getStreakLength() {
    return streakLength;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof StreakRankingUser && equalTo((StreakRankingUser) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(StreakRankingUser other) {
    return userId.equals(other.userId) && name.equals(other.name) && streakLength == other.streakLength;
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.userId, this.name, this.streakLength);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UserIdStage builder() {
    return new Builder();
  }

  public interface UserIdStage {
    /**
     * <p>The ID of the user.</p>
     */
    StreakLengthStage userId(@NotNull String userId);

    Builder from(StreakRankingUser other);
  }

  public interface StreakLengthStage {
    /**
     * <p>The user's streak length (active or longest depending on query parameter).</p>
     */
    _FinalStage streakLength(int streakLength);
  }

  public interface _FinalStage {
    StreakRankingUser build();

    /**
     * <p>The name of the user. May be null if no name is set.</p>
     */
    _FinalStage name(Optional<String> name);

    _FinalStage name(String name);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UserIdStage, StreakLengthStage, _FinalStage {
    private String userId;

    private int streakLength;

    private Optional<String> name = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(StreakRankingUser other) {
      userId(other.getUserId());
      name(other.getName());
      streakLength(other.getStreakLength());
      return this;
    }

    /**
     * <p>The ID of the user.</p>
     * <p>The ID of the user.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("userId")
    public StreakLengthStage userId(@NotNull String userId) {
      this.userId = Objects.requireNonNull(userId, "userId must not be null");
      return this;
    }

    /**
     * <p>The user's streak length (active or longest depending on query parameter).</p>
     * <p>The user's streak length (active or longest depending on query parameter).</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("streakLength")
    public _FinalStage streakLength(int streakLength) {
      this.streakLength = streakLength;
      return this;
    }

    /**
     * <p>The name of the user. May be null if no name is set.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage name(String name) {
      this.name = Optional.ofNullable(name);
      return this;
    }

    /**
     * <p>The name of the user. May be null if no name is set.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "name",
        nulls = Nulls.SKIP
    )
    public _FinalStage name(Optional<String> name) {
      this.name = name;
      return this;
    }

    @java.lang.Override
    public StreakRankingUser build() {
      return new StreakRankingUser(userId, name, streakLength, additionalProperties);
    }
  }
}
