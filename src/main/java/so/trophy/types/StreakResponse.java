package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = StreakResponse.Builder.class
)
public final class StreakResponse {
  private final int length;

  private final StreakFrequency frequency;

  private final Map<String, Object> additionalProperties;

  private StreakResponse(int length, StreakFrequency frequency,
      Map<String, Object> additionalProperties) {
    this.length = length;
    this.frequency = frequency;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The length of the user's current streak.
   */
  @JsonProperty("length")
  public int getLength() {
    return length;
  }

  /**
   * @return The frequency of the streak.
   */
  @JsonProperty("frequency")
  public StreakFrequency getFrequency() {
    return frequency;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof StreakResponse && equalTo((StreakResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(StreakResponse other) {
    return length == other.length && frequency.equals(other.frequency);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.length, this.frequency);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static LengthStage builder() {
    return new Builder();
  }

  public interface LengthStage {
    FrequencyStage length(int length);

    Builder from(StreakResponse other);
  }

  public interface FrequencyStage {
    _FinalStage frequency(@NotNull StreakFrequency frequency);
  }

  public interface _FinalStage {
    StreakResponse build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements LengthStage, FrequencyStage, _FinalStage {
    private int length;

    private StreakFrequency frequency;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(StreakResponse other) {
      length(other.getLength());
      frequency(other.getFrequency());
      return this;
    }

    /**
     * <p>The length of the user's current streak.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("length")
    public FrequencyStage length(int length) {
      this.length = length;
      return this;
    }

    /**
     * <p>The frequency of the streak.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("frequency")
    public _FinalStage frequency(@NotNull StreakFrequency frequency) {
      this.frequency = Objects.requireNonNull(frequency, "frequency must not be null");
      return this;
    }

    @java.lang.Override
    public StreakResponse build() {
      return new StreakResponse(length, frequency, additionalProperties);
    }
  }
}
