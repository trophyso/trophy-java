package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = PointsTrigger.Builder.class
)
public final class PointsTrigger {
  private final Optional<String> id;

  private final Optional<PointsTriggerType> type;

  private final Optional<Double> points;

  private final Optional<String> metricName;

  private final Optional<Double> metricThreshold;

  private final Optional<Double> streakLengthThreshold;

  private final Optional<String> achievementName;

  private final Map<String, Object> additionalProperties;

  private PointsTrigger(Optional<String> id, Optional<PointsTriggerType> type,
      Optional<Double> points, Optional<String> metricName, Optional<Double> metricThreshold,
      Optional<Double> streakLengthThreshold, Optional<String> achievementName,
      Map<String, Object> additionalProperties) {
    this.id = id;
    this.type = type;
    this.points = points;
    this.metricName = metricName;
    this.metricThreshold = metricThreshold;
    this.streakLengthThreshold = streakLengthThreshold;
    this.achievementName = achievementName;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The ID of the trigger
   */
  @JsonProperty("id")
  public Optional<String> getId() {
    return id;
  }

  /**
   * @return The type of trigger
   */
  @JsonProperty("type")
  public Optional<PointsTriggerType> getType() {
    return type;
  }

  /**
   * @return The points awarded by this trigger.
   */
  @JsonProperty("points")
  public Optional<Double> getPoints() {
    return points;
  }

  /**
   * @return If the trigger has type 'metric', the name of the metric
   */
  @JsonProperty("metricName")
  public Optional<String> getMetricName() {
    return metricName;
  }

  /**
   * @return If the trigger has type 'metric', the threshold of the metric that triggers the points
   */
  @JsonProperty("metricThreshold")
  public Optional<Double> getMetricThreshold() {
    return metricThreshold;
  }

  /**
   * @return If the trigger has type 'streak', the threshold of the streak that triggers the points
   */
  @JsonProperty("streakLengthThreshold")
  public Optional<Double> getStreakLengthThreshold() {
    return streakLengthThreshold;
  }

  /**
   * @return If the trigger has type 'achievement', the name of the achievement
   */
  @JsonProperty("achievementName")
  public Optional<String> getAchievementName() {
    return achievementName;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PointsTrigger && equalTo((PointsTrigger) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(PointsTrigger other) {
    return id.equals(other.id) && type.equals(other.type) && points.equals(other.points) && metricName.equals(other.metricName) && metricThreshold.equals(other.metricThreshold) && streakLengthThreshold.equals(other.streakLengthThreshold) && achievementName.equals(other.achievementName);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.type, this.points, this.metricName, this.metricThreshold, this.streakLengthThreshold, this.achievementName);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> id = Optional.empty();

    private Optional<PointsTriggerType> type = Optional.empty();

    private Optional<Double> points = Optional.empty();

    private Optional<String> metricName = Optional.empty();

    private Optional<Double> metricThreshold = Optional.empty();

    private Optional<Double> streakLengthThreshold = Optional.empty();

    private Optional<String> achievementName = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(PointsTrigger other) {
      id(other.getId());
      type(other.getType());
      points(other.getPoints());
      metricName(other.getMetricName());
      metricThreshold(other.getMetricThreshold());
      streakLengthThreshold(other.getStreakLengthThreshold());
      achievementName(other.getAchievementName());
      return this;
    }

    @JsonSetter(
        value = "id",
        nulls = Nulls.SKIP
    )
    public Builder id(Optional<String> id) {
      this.id = id;
      return this;
    }

    public Builder id(String id) {
      this.id = Optional.ofNullable(id);
      return this;
    }

    @JsonSetter(
        value = "type",
        nulls = Nulls.SKIP
    )
    public Builder type(Optional<PointsTriggerType> type) {
      this.type = type;
      return this;
    }

    public Builder type(PointsTriggerType type) {
      this.type = Optional.ofNullable(type);
      return this;
    }

    @JsonSetter(
        value = "points",
        nulls = Nulls.SKIP
    )
    public Builder points(Optional<Double> points) {
      this.points = points;
      return this;
    }

    public Builder points(Double points) {
      this.points = Optional.ofNullable(points);
      return this;
    }

    @JsonSetter(
        value = "metricName",
        nulls = Nulls.SKIP
    )
    public Builder metricName(Optional<String> metricName) {
      this.metricName = metricName;
      return this;
    }

    public Builder metricName(String metricName) {
      this.metricName = Optional.ofNullable(metricName);
      return this;
    }

    @JsonSetter(
        value = "metricThreshold",
        nulls = Nulls.SKIP
    )
    public Builder metricThreshold(Optional<Double> metricThreshold) {
      this.metricThreshold = metricThreshold;
      return this;
    }

    public Builder metricThreshold(Double metricThreshold) {
      this.metricThreshold = Optional.ofNullable(metricThreshold);
      return this;
    }

    @JsonSetter(
        value = "streakLengthThreshold",
        nulls = Nulls.SKIP
    )
    public Builder streakLengthThreshold(Optional<Double> streakLengthThreshold) {
      this.streakLengthThreshold = streakLengthThreshold;
      return this;
    }

    public Builder streakLengthThreshold(Double streakLengthThreshold) {
      this.streakLengthThreshold = Optional.ofNullable(streakLengthThreshold);
      return this;
    }

    @JsonSetter(
        value = "achievementName",
        nulls = Nulls.SKIP
    )
    public Builder achievementName(Optional<String> achievementName) {
      this.achievementName = achievementName;
      return this;
    }

    public Builder achievementName(String achievementName) {
      this.achievementName = Optional.ofNullable(achievementName);
      return this;
    }

    public PointsTrigger build() {
      return new PointsTrigger(id, type, points, metricName, metricThreshold, streakLengthThreshold, achievementName, additionalProperties);
    }
  }
}
