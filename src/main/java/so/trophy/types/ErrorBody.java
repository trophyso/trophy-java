package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = ErrorBody.Builder.class
)
public final class ErrorBody {
  private final String error;

  private final Map<String, Object> additionalProperties;

  private ErrorBody(String error, Map<String, Object> additionalProperties) {
    this.error = error;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("error")
  public String getError() {
    return error;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ErrorBody && equalTo((ErrorBody) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(ErrorBody other) {
    return error.equals(other.error);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.error);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static ErrorStage builder() {
    return new Builder();
  }

  public interface ErrorStage {
    _FinalStage error(@NotNull String error);

    Builder from(ErrorBody other);
  }

  public interface _FinalStage {
    ErrorBody build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ErrorStage, _FinalStage {
    private String error;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(ErrorBody other) {
      error(other.getError());
      return this;
    }

    @java.lang.Override
    @JsonSetter("error")
    public _FinalStage error(@NotNull String error) {
      this.error = Objects.requireNonNull(error, "error must not be null");
      return this;
    }

    @java.lang.Override
    public ErrorBody build() {
      return new ErrorBody(error, additionalProperties);
    }
  }
}
