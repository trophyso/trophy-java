package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = AchievementWithStatsResponse.Builder.class
)
public final class AchievementWithStatsResponse implements IAchievementResponse {
  private final String id;

  private final String name;

  private final AchievementResponseTrigger trigger;

  private final Optional<String> description;

  private final Optional<String> badgeUrl;

  private final Optional<String> key;

  private final Optional<Integer> streakLength;

  private final Optional<String> metricId;

  private final Optional<Double> metricValue;

  private final Optional<String> metricName;

  private final Optional<MetricEventStreakResponse> currentStreak;

  private final Optional<Integer> completions;

  private final Optional<Double> rarity;

  private final Optional<List<AchievementWithStatsResponseUserAttributesItem>> userAttributes;

  private final Optional<AchievementWithStatsResponseEventAttribute> eventAttribute;

  private final Map<String, Object> additionalProperties;

  private AchievementWithStatsResponse(String id, String name, AchievementResponseTrigger trigger,
      Optional<String> description, Optional<String> badgeUrl, Optional<String> key,
      Optional<Integer> streakLength, Optional<String> metricId, Optional<Double> metricValue,
      Optional<String> metricName, Optional<MetricEventStreakResponse> currentStreak,
      Optional<Integer> completions, Optional<Double> rarity,
      Optional<List<AchievementWithStatsResponseUserAttributesItem>> userAttributes,
      Optional<AchievementWithStatsResponseEventAttribute> eventAttribute,
      Map<String, Object> additionalProperties) {
    this.id = id;
    this.name = name;
    this.trigger = trigger;
    this.description = description;
    this.badgeUrl = badgeUrl;
    this.key = key;
    this.streakLength = streakLength;
    this.metricId = metricId;
    this.metricValue = metricValue;
    this.metricName = metricName;
    this.currentStreak = currentStreak;
    this.completions = completions;
    this.rarity = rarity;
    this.userAttributes = userAttributes;
    this.eventAttribute = eventAttribute;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The unique ID of the achievement.
   */
  @JsonProperty("id")
  @java.lang.Override
  public String getId() {
    return id;
  }

  /**
   * @return The name of this achievement.
   */
  @JsonProperty("name")
  @java.lang.Override
  public String getName() {
    return name;
  }

  /**
   * @return The trigger of the achievement.
   */
  @JsonProperty("trigger")
  public AchievementResponseTrigger getTrigger() {
    return trigger;
  }

  /**
   * @return The description of this achievement.
   */
  @JsonProperty("description")
  @java.lang.Override
  public Optional<String> getDescription() {
    return description;
  }

  /**
   * @return The URL of the badge image for the achievement, if one has been uploaded.
   */
  @JsonProperty("badgeUrl")
  @java.lang.Override
  public Optional<String> getBadgeUrl() {
    return badgeUrl;
  }

  /**
   * @return The key used to reference this achievement in the API (only applicable if trigger = 'api')
   */
  @JsonProperty("key")
  @java.lang.Override
  public Optional<String> getKey() {
    return key;
  }

  /**
   * @return The length of the streak required to complete the achievement (only applicable if trigger = 'streak')
   */
  @JsonProperty("streakLength")
  @java.lang.Override
  public Optional<Integer> getStreakLength() {
    return streakLength;
  }

  /**
   * @return The ID of the metric associated with this achievement (only applicable if trigger = 'metric')
   */
  @JsonProperty("metricId")
  @java.lang.Override
  public Optional<String> getMetricId() {
    return metricId;
  }

  /**
   * @return The value of the metric required to complete the achievement (only applicable if trigger = 'metric')
   */
  @JsonProperty("metricValue")
  @java.lang.Override
  public Optional<Double> getMetricValue() {
    return metricValue;
  }

  /**
   * @return The name of the metric associated with this achievement (only applicable if trigger = 'metric')
   */
  @JsonProperty("metricName")
  @java.lang.Override
  public Optional<String> getMetricName() {
    return metricName;
  }

  /**
   * @return The user's current streak for the metric, if the metric has streaks enabled.
   */
  @JsonProperty("currentStreak")
  @java.lang.Override
  public Optional<MetricEventStreakResponse> getCurrentStreak() {
    return currentStreak;
  }

  /**
   * @return The number of users who have completed this achievement.
   */
  @JsonProperty("completions")
  public Optional<Integer> getCompletions() {
    return completions;
  }

  /**
   * @return The percentage of all users who have completed this achievement.
   */
  @JsonProperty("rarity")
  public Optional<Double> getRarity() {
    return rarity;
  }

  /**
   * @return User attribute filters that must be met for this achievement to be completed. Only present if the achievement has user attribute filters configured.
   */
  @JsonProperty("userAttributes")
  public Optional<List<AchievementWithStatsResponseUserAttributesItem>> getUserAttributes() {
    return userAttributes;
  }

  /**
   * @return Event attribute filter that must be met for this achievement to be completed. Only present if the achievement has an event filter configured.
   */
  @JsonProperty("eventAttribute")
  public Optional<AchievementWithStatsResponseEventAttribute> getEventAttribute() {
    return eventAttribute;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof AchievementWithStatsResponse && equalTo((AchievementWithStatsResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(AchievementWithStatsResponse other) {
    return id.equals(other.id) && name.equals(other.name) && trigger.equals(other.trigger) && description.equals(other.description) && badgeUrl.equals(other.badgeUrl) && key.equals(other.key) && streakLength.equals(other.streakLength) && metricId.equals(other.metricId) && metricValue.equals(other.metricValue) && metricName.equals(other.metricName) && currentStreak.equals(other.currentStreak) && completions.equals(other.completions) && rarity.equals(other.rarity) && userAttributes.equals(other.userAttributes) && eventAttribute.equals(other.eventAttribute);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.name, this.trigger, this.description, this.badgeUrl, this.key, this.streakLength, this.metricId, this.metricValue, this.metricName, this.currentStreak, this.completions, this.rarity, this.userAttributes, this.eventAttribute);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    NameStage id(@NotNull String id);

    Builder from(AchievementWithStatsResponse other);
  }

  public interface NameStage {
    TriggerStage name(@NotNull String name);
  }

  public interface TriggerStage {
    _FinalStage trigger(@NotNull AchievementResponseTrigger trigger);
  }

  public interface _FinalStage {
    AchievementWithStatsResponse build();

    _FinalStage description(Optional<String> description);

    _FinalStage description(String description);

    _FinalStage badgeUrl(Optional<String> badgeUrl);

    _FinalStage badgeUrl(String badgeUrl);

    _FinalStage key(Optional<String> key);

    _FinalStage key(String key);

    _FinalStage streakLength(Optional<Integer> streakLength);

    _FinalStage streakLength(Integer streakLength);

    _FinalStage metricId(Optional<String> metricId);

    _FinalStage metricId(String metricId);

    _FinalStage metricValue(Optional<Double> metricValue);

    _FinalStage metricValue(Double metricValue);

    _FinalStage metricName(Optional<String> metricName);

    _FinalStage metricName(String metricName);

    _FinalStage currentStreak(Optional<MetricEventStreakResponse> currentStreak);

    _FinalStage currentStreak(MetricEventStreakResponse currentStreak);

    _FinalStage completions(Optional<Integer> completions);

    _FinalStage completions(Integer completions);

    _FinalStage rarity(Optional<Double> rarity);

    _FinalStage rarity(Double rarity);

    _FinalStage userAttributes(
        Optional<List<AchievementWithStatsResponseUserAttributesItem>> userAttributes);

    _FinalStage userAttributes(List<AchievementWithStatsResponseUserAttributesItem> userAttributes);

    _FinalStage eventAttribute(Optional<AchievementWithStatsResponseEventAttribute> eventAttribute);

    _FinalStage eventAttribute(AchievementWithStatsResponseEventAttribute eventAttribute);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, NameStage, TriggerStage, _FinalStage {
    private String id;

    private String name;

    private AchievementResponseTrigger trigger;

    private Optional<AchievementWithStatsResponseEventAttribute> eventAttribute = Optional.empty();

    private Optional<List<AchievementWithStatsResponseUserAttributesItem>> userAttributes = Optional.empty();

    private Optional<Double> rarity = Optional.empty();

    private Optional<Integer> completions = Optional.empty();

    private Optional<MetricEventStreakResponse> currentStreak = Optional.empty();

    private Optional<String> metricName = Optional.empty();

    private Optional<Double> metricValue = Optional.empty();

    private Optional<String> metricId = Optional.empty();

    private Optional<Integer> streakLength = Optional.empty();

    private Optional<String> key = Optional.empty();

    private Optional<String> badgeUrl = Optional.empty();

    private Optional<String> description = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(AchievementWithStatsResponse other) {
      id(other.getId());
      name(other.getName());
      trigger(other.getTrigger());
      description(other.getDescription());
      badgeUrl(other.getBadgeUrl());
      key(other.getKey());
      streakLength(other.getStreakLength());
      metricId(other.getMetricId());
      metricValue(other.getMetricValue());
      metricName(other.getMetricName());
      currentStreak(other.getCurrentStreak());
      completions(other.getCompletions());
      rarity(other.getRarity());
      userAttributes(other.getUserAttributes());
      eventAttribute(other.getEventAttribute());
      return this;
    }

    /**
     * <p>The unique ID of the achievement.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("id")
    public NameStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    /**
     * <p>The name of this achievement.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("name")
    public TriggerStage name(@NotNull String name) {
      this.name = Objects.requireNonNull(name, "name must not be null");
      return this;
    }

    /**
     * <p>The trigger of the achievement.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("trigger")
    public _FinalStage trigger(@NotNull AchievementResponseTrigger trigger) {
      this.trigger = Objects.requireNonNull(trigger, "trigger must not be null");
      return this;
    }

    /**
     * <p>Event attribute filter that must be met for this achievement to be completed. Only present if the achievement has an event filter configured.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage eventAttribute(AchievementWithStatsResponseEventAttribute eventAttribute) {
      this.eventAttribute = Optional.ofNullable(eventAttribute);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "eventAttribute",
        nulls = Nulls.SKIP
    )
    public _FinalStage eventAttribute(
        Optional<AchievementWithStatsResponseEventAttribute> eventAttribute) {
      this.eventAttribute = eventAttribute;
      return this;
    }

    /**
     * <p>User attribute filters that must be met for this achievement to be completed. Only present if the achievement has user attribute filters configured.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage userAttributes(
        List<AchievementWithStatsResponseUserAttributesItem> userAttributes) {
      this.userAttributes = Optional.ofNullable(userAttributes);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "userAttributes",
        nulls = Nulls.SKIP
    )
    public _FinalStage userAttributes(
        Optional<List<AchievementWithStatsResponseUserAttributesItem>> userAttributes) {
      this.userAttributes = userAttributes;
      return this;
    }

    /**
     * <p>The percentage of all users who have completed this achievement.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage rarity(Double rarity) {
      this.rarity = Optional.ofNullable(rarity);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "rarity",
        nulls = Nulls.SKIP
    )
    public _FinalStage rarity(Optional<Double> rarity) {
      this.rarity = rarity;
      return this;
    }

    /**
     * <p>The number of users who have completed this achievement.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage completions(Integer completions) {
      this.completions = Optional.ofNullable(completions);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "completions",
        nulls = Nulls.SKIP
    )
    public _FinalStage completions(Optional<Integer> completions) {
      this.completions = completions;
      return this;
    }

    /**
     * <p>The user's current streak for the metric, if the metric has streaks enabled.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage currentStreak(MetricEventStreakResponse currentStreak) {
      this.currentStreak = Optional.ofNullable(currentStreak);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "currentStreak",
        nulls = Nulls.SKIP
    )
    public _FinalStage currentStreak(Optional<MetricEventStreakResponse> currentStreak) {
      this.currentStreak = currentStreak;
      return this;
    }

    /**
     * <p>The name of the metric associated with this achievement (only applicable if trigger = 'metric')</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage metricName(String metricName) {
      this.metricName = Optional.ofNullable(metricName);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "metricName",
        nulls = Nulls.SKIP
    )
    public _FinalStage metricName(Optional<String> metricName) {
      this.metricName = metricName;
      return this;
    }

    /**
     * <p>The value of the metric required to complete the achievement (only applicable if trigger = 'metric')</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage metricValue(Double metricValue) {
      this.metricValue = Optional.ofNullable(metricValue);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "metricValue",
        nulls = Nulls.SKIP
    )
    public _FinalStage metricValue(Optional<Double> metricValue) {
      this.metricValue = metricValue;
      return this;
    }

    /**
     * <p>The ID of the metric associated with this achievement (only applicable if trigger = 'metric')</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage metricId(String metricId) {
      this.metricId = Optional.ofNullable(metricId);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "metricId",
        nulls = Nulls.SKIP
    )
    public _FinalStage metricId(Optional<String> metricId) {
      this.metricId = metricId;
      return this;
    }

    /**
     * <p>The length of the streak required to complete the achievement (only applicable if trigger = 'streak')</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage streakLength(Integer streakLength) {
      this.streakLength = Optional.ofNullable(streakLength);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "streakLength",
        nulls = Nulls.SKIP
    )
    public _FinalStage streakLength(Optional<Integer> streakLength) {
      this.streakLength = streakLength;
      return this;
    }

    /**
     * <p>The key used to reference this achievement in the API (only applicable if trigger = 'api')</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage key(String key) {
      this.key = Optional.ofNullable(key);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "key",
        nulls = Nulls.SKIP
    )
    public _FinalStage key(Optional<String> key) {
      this.key = key;
      return this;
    }

    /**
     * <p>The URL of the badge image for the achievement, if one has been uploaded.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage badgeUrl(String badgeUrl) {
      this.badgeUrl = Optional.ofNullable(badgeUrl);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "badgeUrl",
        nulls = Nulls.SKIP
    )
    public _FinalStage badgeUrl(Optional<String> badgeUrl) {
      this.badgeUrl = badgeUrl;
      return this;
    }

    /**
     * <p>The description of this achievement.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage description(String description) {
      this.description = Optional.ofNullable(description);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "description",
        nulls = Nulls.SKIP
    )
    public _FinalStage description(Optional<String> description) {
      this.description = description;
      return this;
    }

    @java.lang.Override
    public AchievementWithStatsResponse build() {
      return new AchievementWithStatsResponse(id, name, trigger, description, badgeUrl, key, streakLength, metricId, metricValue, metricName, currentStreak, completions, rarity, userAttributes, eventAttribute, additionalProperties);
    }
  }
}
