package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = PointsAward.Builder.class
)
public final class PointsAward {
  private final Optional<String> id;

  private final Optional<Double> awarded;

  private final Optional<String> date;

  private final Optional<Double> total;

  private final Optional<PointsTrigger> trigger;

  private final Map<String, Object> additionalProperties;

  private PointsAward(Optional<String> id, Optional<Double> awarded, Optional<String> date,
      Optional<Double> total, Optional<PointsTrigger> trigger,
      Map<String, Object> additionalProperties) {
    this.id = id;
    this.awarded = awarded;
    this.date = date;
    this.total = total;
    this.trigger = trigger;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The ID of the trigger award
   */
  @JsonProperty("id")
  public Optional<String> getId() {
    return id;
  }

  /**
   * @return The points awarded by this trigger
   */
  @JsonProperty("awarded")
  public Optional<Double> getAwarded() {
    return awarded;
  }

  /**
   * @return The date these points were awarded, in ISO 8601 format.
   */
  @JsonProperty("date")
  public Optional<String> getDate() {
    return date;
  }

  /**
   * @return The user's total points after this award occurred.
   */
  @JsonProperty("total")
  public Optional<Double> getTotal() {
    return total;
  }

  @JsonProperty("trigger")
  public Optional<PointsTrigger> getTrigger() {
    return trigger;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PointsAward && equalTo((PointsAward) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(PointsAward other) {
    return id.equals(other.id) && awarded.equals(other.awarded) && date.equals(other.date) && total.equals(other.total) && trigger.equals(other.trigger);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.awarded, this.date, this.total, this.trigger);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> id = Optional.empty();

    private Optional<Double> awarded = Optional.empty();

    private Optional<String> date = Optional.empty();

    private Optional<Double> total = Optional.empty();

    private Optional<PointsTrigger> trigger = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(PointsAward other) {
      id(other.getId());
      awarded(other.getAwarded());
      date(other.getDate());
      total(other.getTotal());
      trigger(other.getTrigger());
      return this;
    }

    @JsonSetter(
        value = "id",
        nulls = Nulls.SKIP
    )
    public Builder id(Optional<String> id) {
      this.id = id;
      return this;
    }

    public Builder id(String id) {
      this.id = Optional.ofNullable(id);
      return this;
    }

    @JsonSetter(
        value = "awarded",
        nulls = Nulls.SKIP
    )
    public Builder awarded(Optional<Double> awarded) {
      this.awarded = awarded;
      return this;
    }

    public Builder awarded(Double awarded) {
      this.awarded = Optional.ofNullable(awarded);
      return this;
    }

    @JsonSetter(
        value = "date",
        nulls = Nulls.SKIP
    )
    public Builder date(Optional<String> date) {
      this.date = date;
      return this;
    }

    public Builder date(String date) {
      this.date = Optional.ofNullable(date);
      return this;
    }

    @JsonSetter(
        value = "total",
        nulls = Nulls.SKIP
    )
    public Builder total(Optional<Double> total) {
      this.total = total;
      return this;
    }

    public Builder total(Double total) {
      this.total = Optional.ofNullable(total);
      return this;
    }

    @JsonSetter(
        value = "trigger",
        nulls = Nulls.SKIP
    )
    public Builder trigger(Optional<PointsTrigger> trigger) {
      this.trigger = trigger;
      return this;
    }

    public Builder trigger(PointsTrigger trigger) {
      this.trigger = Optional.ofNullable(trigger);
      return this;
    }

    public PointsAward build() {
      return new PointsAward(id, awarded, date, total, trigger, additionalProperties);
    }
  }
}
