package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = EventResponse.Builder.class
)
public final class EventResponse {
  private final String eventId;

  private final String metricId;

  private final double total;

  private final Optional<List<CompletedAchievementResponse>> achievements;

  private final Optional<MetricEventStreakResponse> currentStreak;

  private final Optional<Map<String, MetricEventPointsResponse>> points;

  private final Optional<String> idempotencyKey;

  private final Optional<Boolean> idempotentReplayed;

  private final Map<String, Object> additionalProperties;

  private EventResponse(String eventId, String metricId, double total,
      Optional<List<CompletedAchievementResponse>> achievements,
      Optional<MetricEventStreakResponse> currentStreak,
      Optional<Map<String, MetricEventPointsResponse>> points, Optional<String> idempotencyKey,
      Optional<Boolean> idempotentReplayed, Map<String, Object> additionalProperties) {
    this.eventId = eventId;
    this.metricId = metricId;
    this.total = total;
    this.achievements = achievements;
    this.currentStreak = currentStreak;
    this.points = points;
    this.idempotencyKey = idempotencyKey;
    this.idempotentReplayed = idempotentReplayed;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The unique ID of the event.
   */
  @JsonProperty("eventId")
  public String getEventId() {
    return eventId;
  }

  /**
   * @return The unique ID of the metric that was updated.
   */
  @JsonProperty("metricId")
  public String getMetricId() {
    return metricId;
  }

  /**
   * @return The user's new total progress against the metric.
   */
  @JsonProperty("total")
  public double getTotal() {
    return total;
  }

  /**
   * @return Achievements completed as a result of this event.
   */
  @JsonProperty("achievements")
  public Optional<List<CompletedAchievementResponse>> getAchievements() {
    return achievements;
  }

  /**
   * @return The user's current streak for the metric, if the metric has streaks enabled.
   */
  @JsonProperty("currentStreak")
  public Optional<MetricEventStreakResponse> getCurrentStreak() {
    return currentStreak;
  }

  /**
   * @return A map of points systems by key that were affected by this event.
   */
  @JsonProperty("points")
  public Optional<Map<String, MetricEventPointsResponse>> getPoints() {
    return points;
  }

  /**
   * @return The idempotency key used for the event, if one was provided.
   */
  @JsonProperty("idempotencyKey")
  public Optional<String> getIdempotencyKey() {
    return idempotencyKey;
  }

  /**
   * @return Whether the event was replayed due to idempotency.
   */
  @JsonProperty("idempotentReplayed")
  public Optional<Boolean> getIdempotentReplayed() {
    return idempotentReplayed;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EventResponse && equalTo((EventResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(EventResponse other) {
    return eventId.equals(other.eventId) && metricId.equals(other.metricId) && total == other.total && achievements.equals(other.achievements) && currentStreak.equals(other.currentStreak) && points.equals(other.points) && idempotencyKey.equals(other.idempotencyKey) && idempotentReplayed.equals(other.idempotentReplayed);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.eventId, this.metricId, this.total, this.achievements, this.currentStreak, this.points, this.idempotencyKey, this.idempotentReplayed);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static EventIdStage builder() {
    return new Builder();
  }

  public interface EventIdStage {
    MetricIdStage eventId(@NotNull String eventId);

    Builder from(EventResponse other);
  }

  public interface MetricIdStage {
    TotalStage metricId(@NotNull String metricId);
  }

  public interface TotalStage {
    _FinalStage total(double total);
  }

  public interface _FinalStage {
    EventResponse build();

    _FinalStage achievements(Optional<List<CompletedAchievementResponse>> achievements);

    _FinalStage achievements(List<CompletedAchievementResponse> achievements);

    _FinalStage currentStreak(Optional<MetricEventStreakResponse> currentStreak);

    _FinalStage currentStreak(MetricEventStreakResponse currentStreak);

    _FinalStage points(Optional<Map<String, MetricEventPointsResponse>> points);

    _FinalStage points(Map<String, MetricEventPointsResponse> points);

    _FinalStage idempotencyKey(Optional<String> idempotencyKey);

    _FinalStage idempotencyKey(String idempotencyKey);

    _FinalStage idempotentReplayed(Optional<Boolean> idempotentReplayed);

    _FinalStage idempotentReplayed(Boolean idempotentReplayed);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements EventIdStage, MetricIdStage, TotalStage, _FinalStage {
    private String eventId;

    private String metricId;

    private double total;

    private Optional<Boolean> idempotentReplayed = Optional.empty();

    private Optional<String> idempotencyKey = Optional.empty();

    private Optional<Map<String, MetricEventPointsResponse>> points = Optional.empty();

    private Optional<MetricEventStreakResponse> currentStreak = Optional.empty();

    private Optional<List<CompletedAchievementResponse>> achievements = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(EventResponse other) {
      eventId(other.getEventId());
      metricId(other.getMetricId());
      total(other.getTotal());
      achievements(other.getAchievements());
      currentStreak(other.getCurrentStreak());
      points(other.getPoints());
      idempotencyKey(other.getIdempotencyKey());
      idempotentReplayed(other.getIdempotentReplayed());
      return this;
    }

    /**
     * <p>The unique ID of the event.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("eventId")
    public MetricIdStage eventId(@NotNull String eventId) {
      this.eventId = Objects.requireNonNull(eventId, "eventId must not be null");
      return this;
    }

    /**
     * <p>The unique ID of the metric that was updated.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("metricId")
    public TotalStage metricId(@NotNull String metricId) {
      this.metricId = Objects.requireNonNull(metricId, "metricId must not be null");
      return this;
    }

    /**
     * <p>The user's new total progress against the metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("total")
    public _FinalStage total(double total) {
      this.total = total;
      return this;
    }

    /**
     * <p>Whether the event was replayed due to idempotency.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage idempotentReplayed(Boolean idempotentReplayed) {
      this.idempotentReplayed = Optional.ofNullable(idempotentReplayed);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "idempotentReplayed",
        nulls = Nulls.SKIP
    )
    public _FinalStage idempotentReplayed(Optional<Boolean> idempotentReplayed) {
      this.idempotentReplayed = idempotentReplayed;
      return this;
    }

    /**
     * <p>The idempotency key used for the event, if one was provided.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage idempotencyKey(String idempotencyKey) {
      this.idempotencyKey = Optional.ofNullable(idempotencyKey);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "idempotencyKey",
        nulls = Nulls.SKIP
    )
    public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
      this.idempotencyKey = idempotencyKey;
      return this;
    }

    /**
     * <p>A map of points systems by key that were affected by this event.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage points(Map<String, MetricEventPointsResponse> points) {
      this.points = Optional.ofNullable(points);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "points",
        nulls = Nulls.SKIP
    )
    public _FinalStage points(Optional<Map<String, MetricEventPointsResponse>> points) {
      this.points = points;
      return this;
    }

    /**
     * <p>The user's current streak for the metric, if the metric has streaks enabled.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage currentStreak(MetricEventStreakResponse currentStreak) {
      this.currentStreak = Optional.ofNullable(currentStreak);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "currentStreak",
        nulls = Nulls.SKIP
    )
    public _FinalStage currentStreak(Optional<MetricEventStreakResponse> currentStreak) {
      this.currentStreak = currentStreak;
      return this;
    }

    /**
     * <p>Achievements completed as a result of this event.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage achievements(List<CompletedAchievementResponse> achievements) {
      this.achievements = Optional.ofNullable(achievements);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "achievements",
        nulls = Nulls.SKIP
    )
    public _FinalStage achievements(Optional<List<CompletedAchievementResponse>> achievements) {
      this.achievements = achievements;
      return this;
    }

    @java.lang.Override
    public EventResponse build() {
      return new EventResponse(eventId, metricId, total, achievements, currentStreak, points, idempotencyKey, idempotentReplayed, additionalProperties);
    }
  }
}
