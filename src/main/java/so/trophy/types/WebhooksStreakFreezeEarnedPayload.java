package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = WebhooksStreakFreezeEarnedPayload.Builder.class
)
public final class WebhooksStreakFreezeEarnedPayload {
  private final User user;

  private final int earned;

  private final int freezes;

  private final Map<String, Object> additionalProperties;

  private WebhooksStreakFreezeEarnedPayload(User user, int earned, int freezes,
      Map<String, Object> additionalProperties) {
    this.user = user;
    this.earned = earned;
    this.freezes = freezes;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The webhook event type.
   */
  @JsonProperty("type")
  public String getType() {
    return "streak.freeze_earned";
  }

  /**
   * @return The user who earned streak freezes.
   */
  @JsonProperty("user")
  public User getUser() {
    return user;
  }

  /**
   * @return The number of freezes earned.
   */
  @JsonProperty("earned")
  public int getEarned() {
    return earned;
  }

  /**
   * @return The total number of freezes the user has after the event.
   */
  @JsonProperty("freezes")
  public int getFreezes() {
    return freezes;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WebhooksStreakFreezeEarnedPayload && equalTo((WebhooksStreakFreezeEarnedPayload) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(WebhooksStreakFreezeEarnedPayload other) {
    return user.equals(other.user) && earned == other.earned && freezes == other.freezes;
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.user, this.earned, this.freezes);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UserStage builder() {
    return new Builder();
  }

  public interface UserStage {
    /**
     * <p>The user who earned streak freezes.</p>
     */
    EarnedStage user(@NotNull User user);

    Builder from(WebhooksStreakFreezeEarnedPayload other);
  }

  public interface EarnedStage {
    /**
     * <p>The number of freezes earned.</p>
     */
    FreezesStage earned(int earned);
  }

  public interface FreezesStage {
    /**
     * <p>The total number of freezes the user has after the event.</p>
     */
    _FinalStage freezes(int freezes);
  }

  public interface _FinalStage {
    WebhooksStreakFreezeEarnedPayload build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UserStage, EarnedStage, FreezesStage, _FinalStage {
    private User user;

    private int earned;

    private int freezes;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(WebhooksStreakFreezeEarnedPayload other) {
      user(other.getUser());
      earned(other.getEarned());
      freezes(other.getFreezes());
      return this;
    }

    /**
     * <p>The user who earned streak freezes.</p>
     * <p>The user who earned streak freezes.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("user")
    public EarnedStage user(@NotNull User user) {
      this.user = Objects.requireNonNull(user, "user must not be null");
      return this;
    }

    /**
     * <p>The number of freezes earned.</p>
     * <p>The number of freezes earned.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("earned")
    public FreezesStage earned(int earned) {
      this.earned = earned;
      return this;
    }

    /**
     * <p>The total number of freezes the user has after the event.</p>
     * <p>The total number of freezes the user has after the event.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("freezes")
    public _FinalStage freezes(int freezes) {
      this.freezes = freezes;
      return this;
    }

    @java.lang.Override
    public WebhooksStreakFreezeEarnedPayload build() {
      return new WebhooksStreakFreezeEarnedPayload(user, earned, freezes, additionalProperties);
    }
  }
}
