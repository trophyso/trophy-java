package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = BulkInsertIssue.Builder.class
)
public final class BulkInsertIssue {
  private final String userId;

  private final BulkInsertIssueLevel level;

  private final String reason;

  private final Map<String, Object> additionalProperties;

  private BulkInsertIssue(String userId, BulkInsertIssueLevel level, String reason,
      Map<String, Object> additionalProperties) {
    this.userId = userId;
    this.level = level;
    this.reason = reason;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The ID of the user the issue relates to.
   */
  @JsonProperty("userId")
  public String getUserId() {
    return userId;
  }

  /**
   * @return The severity level of the issue.
   */
  @JsonProperty("level")
  public BulkInsertIssueLevel getLevel() {
    return level;
  }

  /**
   * @return A human-readable description of the issue.
   */
  @JsonProperty("reason")
  public String getReason() {
    return reason;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BulkInsertIssue && equalTo((BulkInsertIssue) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(BulkInsertIssue other) {
    return userId.equals(other.userId) && level.equals(other.level) && reason.equals(other.reason);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.userId, this.level, this.reason);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UserIdStage builder() {
    return new Builder();
  }

  public interface UserIdStage {
    LevelStage userId(@NotNull String userId);

    Builder from(BulkInsertIssue other);
  }

  public interface LevelStage {
    ReasonStage level(@NotNull BulkInsertIssueLevel level);
  }

  public interface ReasonStage {
    _FinalStage reason(@NotNull String reason);
  }

  public interface _FinalStage {
    BulkInsertIssue build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UserIdStage, LevelStage, ReasonStage, _FinalStage {
    private String userId;

    private BulkInsertIssueLevel level;

    private String reason;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(BulkInsertIssue other) {
      userId(other.getUserId());
      level(other.getLevel());
      reason(other.getReason());
      return this;
    }

    /**
     * <p>The ID of the user the issue relates to.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("userId")
    public LevelStage userId(@NotNull String userId) {
      this.userId = Objects.requireNonNull(userId, "userId must not be null");
      return this;
    }

    /**
     * <p>The severity level of the issue.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("level")
    public ReasonStage level(@NotNull BulkInsertIssueLevel level) {
      this.level = Objects.requireNonNull(level, "level must not be null");
      return this;
    }

    /**
     * <p>A human-readable description of the issue.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("reason")
    public _FinalStage reason(@NotNull String reason) {
      this.reason = Objects.requireNonNull(reason, "reason must not be null");
      return this;
    }

    @java.lang.Override
    public BulkInsertIssue build() {
      return new BulkInsertIssue(userId, level, reason, additionalProperties);
    }
  }
}
