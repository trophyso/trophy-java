package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = MetricEventStreakResponse.Builder.class
)
public final class MetricEventStreakResponse implements IBaseStreakResponse {
  private final int length;

  private final StreakFrequency frequency;

  private final Optional<String> started;

  private final Optional<String> periodStart;

  private final Optional<String> periodEnd;

  private final Optional<String> expires;

  private final Optional<Boolean> extended;

  private final Map<String, Object> additionalProperties;

  private MetricEventStreakResponse(int length, StreakFrequency frequency, Optional<String> started,
      Optional<String> periodStart, Optional<String> periodEnd, Optional<String> expires,
      Optional<Boolean> extended, Map<String, Object> additionalProperties) {
    this.length = length;
    this.frequency = frequency;
    this.started = started;
    this.periodStart = periodStart;
    this.periodEnd = periodEnd;
    this.expires = expires;
    this.extended = extended;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The length of the user's current streak.
   */
  @JsonProperty("length")
  @java.lang.Override
  public int getLength() {
    return length;
  }

  /**
   * @return The frequency of the streak.
   */
  @JsonProperty("frequency")
  @java.lang.Override
  public StreakFrequency getFrequency() {
    return frequency;
  }

  /**
   * @return The date the streak started.
   */
  @JsonProperty("started")
  @java.lang.Override
  public Optional<String> getStarted() {
    return started;
  }

  /**
   * @return The start date of the current streak period.
   */
  @JsonProperty("periodStart")
  @java.lang.Override
  public Optional<String> getPeriodStart() {
    return periodStart;
  }

  /**
   * @return The end date of the current streak period.
   */
  @JsonProperty("periodEnd")
  @java.lang.Override
  public Optional<String> getPeriodEnd() {
    return periodEnd;
  }

  /**
   * @return The date the streak will expire if the user does not increment a metric.
   */
  @JsonProperty("expires")
  @java.lang.Override
  public Optional<String> getExpires() {
    return expires;
  }

  /**
   * @return Whether this metric event increased the user's streak length.
   */
  @JsonProperty("extended")
  public Optional<Boolean> getExtended() {
    return extended;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof MetricEventStreakResponse && equalTo((MetricEventStreakResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(MetricEventStreakResponse other) {
    return length == other.length && frequency.equals(other.frequency) && started.equals(other.started) && periodStart.equals(other.periodStart) && periodEnd.equals(other.periodEnd) && expires.equals(other.expires) && extended.equals(other.extended);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.length, this.frequency, this.started, this.periodStart, this.periodEnd, this.expires, this.extended);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static LengthStage builder() {
    return new Builder();
  }

  public interface LengthStage {
    FrequencyStage length(int length);

    Builder from(MetricEventStreakResponse other);
  }

  public interface FrequencyStage {
    _FinalStage frequency(@NotNull StreakFrequency frequency);
  }

  public interface _FinalStage {
    MetricEventStreakResponse build();

    _FinalStage started(Optional<String> started);

    _FinalStage started(String started);

    _FinalStage periodStart(Optional<String> periodStart);

    _FinalStage periodStart(String periodStart);

    _FinalStage periodEnd(Optional<String> periodEnd);

    _FinalStage periodEnd(String periodEnd);

    _FinalStage expires(Optional<String> expires);

    _FinalStage expires(String expires);

    _FinalStage extended(Optional<Boolean> extended);

    _FinalStage extended(Boolean extended);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements LengthStage, FrequencyStage, _FinalStage {
    private int length;

    private StreakFrequency frequency;

    private Optional<Boolean> extended = Optional.empty();

    private Optional<String> expires = Optional.empty();

    private Optional<String> periodEnd = Optional.empty();

    private Optional<String> periodStart = Optional.empty();

    private Optional<String> started = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(MetricEventStreakResponse other) {
      length(other.getLength());
      frequency(other.getFrequency());
      started(other.getStarted());
      periodStart(other.getPeriodStart());
      periodEnd(other.getPeriodEnd());
      expires(other.getExpires());
      extended(other.getExtended());
      return this;
    }

    /**
     * <p>The length of the user's current streak.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("length")
    public FrequencyStage length(int length) {
      this.length = length;
      return this;
    }

    /**
     * <p>The frequency of the streak.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("frequency")
    public _FinalStage frequency(@NotNull StreakFrequency frequency) {
      this.frequency = Objects.requireNonNull(frequency, "frequency must not be null");
      return this;
    }

    /**
     * <p>Whether this metric event increased the user's streak length.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage extended(Boolean extended) {
      this.extended = Optional.ofNullable(extended);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "extended",
        nulls = Nulls.SKIP
    )
    public _FinalStage extended(Optional<Boolean> extended) {
      this.extended = extended;
      return this;
    }

    /**
     * <p>The date the streak will expire if the user does not increment a metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage expires(String expires) {
      this.expires = Optional.ofNullable(expires);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "expires",
        nulls = Nulls.SKIP
    )
    public _FinalStage expires(Optional<String> expires) {
      this.expires = expires;
      return this;
    }

    /**
     * <p>The end date of the current streak period.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage periodEnd(String periodEnd) {
      this.periodEnd = Optional.ofNullable(periodEnd);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "periodEnd",
        nulls = Nulls.SKIP
    )
    public _FinalStage periodEnd(Optional<String> periodEnd) {
      this.periodEnd = periodEnd;
      return this;
    }

    /**
     * <p>The start date of the current streak period.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage periodStart(String periodStart) {
      this.periodStart = Optional.ofNullable(periodStart);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "periodStart",
        nulls = Nulls.SKIP
    )
    public _FinalStage periodStart(Optional<String> periodStart) {
      this.periodStart = periodStart;
      return this;
    }

    /**
     * <p>The date the streak started.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage started(String started) {
      this.started = Optional.ofNullable(started);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "started",
        nulls = Nulls.SKIP
    )
    public _FinalStage started(Optional<String> started) {
      this.started = started;
      return this;
    }

    @java.lang.Override
    public MetricEventStreakResponse build() {
      return new MetricEventStreakResponse(length, frequency, started, periodStart, periodEnd, expires, extended, additionalProperties);
    }
  }
}
