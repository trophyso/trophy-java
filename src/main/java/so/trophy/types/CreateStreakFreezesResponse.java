package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = CreateStreakFreezesResponse.Builder.class
)
public final class CreateStreakFreezesResponse {
  private final List<BulkInsertIssue> issues;

  private final Map<String, Object> additionalProperties;

  private CreateStreakFreezesResponse(List<BulkInsertIssue> issues,
      Map<String, Object> additionalProperties) {
    this.issues = issues;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Array of issues encountered during freeze creation.
   */
  @JsonProperty("issues")
  public List<BulkInsertIssue> getIssues() {
    return issues;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreateStreakFreezesResponse && equalTo((CreateStreakFreezesResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(CreateStreakFreezesResponse other) {
    return issues.equals(other.issues);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.issues);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private List<BulkInsertIssue> issues = new ArrayList<>();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(CreateStreakFreezesResponse other) {
      issues(other.getIssues());
      return this;
    }

    /**
     * <p>Array of issues encountered during freeze creation.</p>
     */
    @JsonSetter(
        value = "issues",
        nulls = Nulls.SKIP
    )
    public Builder issues(List<BulkInsertIssue> issues) {
      this.issues.clear();
      this.issues.addAll(issues);
      return this;
    }

    public Builder addIssues(BulkInsertIssue issues) {
      this.issues.add(issues);
      return this;
    }

    public Builder addAllIssues(List<BulkInsertIssue> issues) {
      if (issues != null) {
        this.issues.addAll(issues);
      }
      return this;
    }

    public CreateStreakFreezesResponse build() {
      return new CreateStreakFreezesResponse(issues, additionalProperties);
    }
  }
}
