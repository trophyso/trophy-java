package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = PointsTriggerResponse.Builder.class
)
public final class PointsTriggerResponse {
  private final String id;

  private final PointsTriggerResponseType type;

  private final int points;

  private final PointsTriggerResponseStatus status;

  private final Optional<String> achievementId;

  private final Optional<String> metricId;

  private final Optional<Integer> metricThreshold;

  private final Optional<Integer> streakLengthThreshold;

  private final Optional<String> metricName;

  private final Optional<String> achievementName;

  private final Optional<PointsTriggerResponseTimeUnit> timeUnit;

  private final Optional<Integer> timeInterval;

  private final Optional<List<PointsTriggerResponseUserAttributesItem>> userAttributes;

  private final Optional<PointsTriggerResponseEventAttribute> eventAttribute;

  private final OffsetDateTime created;

  private final OffsetDateTime updated;

  private final Map<String, Object> additionalProperties;

  private PointsTriggerResponse(String id, PointsTriggerResponseType type, int points,
      PointsTriggerResponseStatus status, Optional<String> achievementId, Optional<String> metricId,
      Optional<Integer> metricThreshold, Optional<Integer> streakLengthThreshold,
      Optional<String> metricName, Optional<String> achievementName,
      Optional<PointsTriggerResponseTimeUnit> timeUnit, Optional<Integer> timeInterval,
      Optional<List<PointsTriggerResponseUserAttributesItem>> userAttributes,
      Optional<PointsTriggerResponseEventAttribute> eventAttribute, OffsetDateTime created,
      OffsetDateTime updated, Map<String, Object> additionalProperties) {
    this.id = id;
    this.type = type;
    this.points = points;
    this.status = status;
    this.achievementId = achievementId;
    this.metricId = metricId;
    this.metricThreshold = metricThreshold;
    this.streakLengthThreshold = streakLengthThreshold;
    this.metricName = metricName;
    this.achievementName = achievementName;
    this.timeUnit = timeUnit;
    this.timeInterval = timeInterval;
    this.userAttributes = userAttributes;
    this.eventAttribute = eventAttribute;
    this.created = created;
    this.updated = updated;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The unique ID of the trigger.
   */
  @JsonProperty("id")
  public String getId() {
    return id;
  }

  /**
   * @return The type of trigger.
   */
  @JsonProperty("type")
  public PointsTriggerResponseType getType() {
    return type;
  }

  /**
   * @return The points awarded by this trigger.
   */
  @JsonProperty("points")
  public int getPoints() {
    return points;
  }

  /**
   * @return The status of the trigger.
   */
  @JsonProperty("status")
  public PointsTriggerResponseStatus getStatus() {
    return status;
  }

  /**
   * @return The unique ID of the achievement associated with this trigger, if the trigger is an achievement.
   */
  @JsonProperty("achievementId")
  public Optional<String> getAchievementId() {
    return achievementId;
  }

  /**
   * @return The unique ID of the metric associated with this trigger, if the trigger is a metric.
   */
  @JsonProperty("metricId")
  public Optional<String> getMetricId() {
    return metricId;
  }

  /**
   * @return The amount that a user must increase the metric to earn the points, if the trigger is a metric.
   */
  @JsonProperty("metricThreshold")
  public Optional<Integer> getMetricThreshold() {
    return metricThreshold;
  }

  /**
   * @return The number of consecutive streak periods that a user must complete to earn the points, if the trigger is a streak.
   */
  @JsonProperty("streakLengthThreshold")
  public Optional<Integer> getStreakLengthThreshold() {
    return streakLengthThreshold;
  }

  /**
   * @return The name of the metric associated with this trigger, if the trigger is a metric.
   */
  @JsonProperty("metricName")
  public Optional<String> getMetricName() {
    return metricName;
  }

  /**
   * @return The name of the achievement associated with this trigger, if the trigger is an achievement.
   */
  @JsonProperty("achievementName")
  public Optional<String> getAchievementName() {
    return achievementName;
  }

  /**
   * @return The time unit of the trigger, if the trigger is a time interval.
   */
  @JsonProperty("timeUnit")
  public Optional<PointsTriggerResponseTimeUnit> getTimeUnit() {
    return timeUnit;
  }

  /**
   * @return The interval of the trigger in the time unit, if the trigger is a time interval.
   */
  @JsonProperty("timeInterval")
  public Optional<Integer> getTimeInterval() {
    return timeInterval;
  }

  /**
   * @return User attribute filters that must be met for this trigger to activate. Only present if the trigger has user attribute filters configured.
   */
  @JsonProperty("userAttributes")
  public Optional<List<PointsTriggerResponseUserAttributesItem>> getUserAttributes() {
    return userAttributes;
  }

  /**
   * @return Event attribute filter that must be met for this trigger to activate. Only present if the trigger has an event filter configured.
   */
  @JsonProperty("eventAttribute")
  public Optional<PointsTriggerResponseEventAttribute> getEventAttribute() {
    return eventAttribute;
  }

  /**
   * @return The date and time the trigger was created, in ISO 8601 format.
   */
  @JsonProperty("created")
  public OffsetDateTime getCreated() {
    return created;
  }

  /**
   * @return The date and time the trigger was last updated, in ISO 8601 format.
   */
  @JsonProperty("updated")
  public OffsetDateTime getUpdated() {
    return updated;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PointsTriggerResponse && equalTo((PointsTriggerResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(PointsTriggerResponse other) {
    return id.equals(other.id) && type.equals(other.type) && points == other.points && status.equals(other.status) && achievementId.equals(other.achievementId) && metricId.equals(other.metricId) && metricThreshold.equals(other.metricThreshold) && streakLengthThreshold.equals(other.streakLengthThreshold) && metricName.equals(other.metricName) && achievementName.equals(other.achievementName) && timeUnit.equals(other.timeUnit) && timeInterval.equals(other.timeInterval) && userAttributes.equals(other.userAttributes) && eventAttribute.equals(other.eventAttribute) && created.equals(other.created) && updated.equals(other.updated);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.type, this.points, this.status, this.achievementId, this.metricId, this.metricThreshold, this.streakLengthThreshold, this.metricName, this.achievementName, this.timeUnit, this.timeInterval, this.userAttributes, this.eventAttribute, this.created, this.updated);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    /**
     * <p>The unique ID of the trigger.</p>
     */
    TypeStage id(@NotNull String id);

    Builder from(PointsTriggerResponse other);
  }

  public interface TypeStage {
    /**
     * <p>The type of trigger.</p>
     */
    PointsStage type(@NotNull PointsTriggerResponseType type);
  }

  public interface PointsStage {
    /**
     * <p>The points awarded by this trigger.</p>
     */
    StatusStage points(int points);
  }

  public interface StatusStage {
    /**
     * <p>The status of the trigger.</p>
     */
    CreatedStage status(@NotNull PointsTriggerResponseStatus status);
  }

  public interface CreatedStage {
    /**
     * <p>The date and time the trigger was created, in ISO 8601 format.</p>
     */
    UpdatedStage created(@NotNull OffsetDateTime created);
  }

  public interface UpdatedStage {
    /**
     * <p>The date and time the trigger was last updated, in ISO 8601 format.</p>
     */
    _FinalStage updated(@NotNull OffsetDateTime updated);
  }

  public interface _FinalStage {
    PointsTriggerResponse build();

    /**
     * <p>The unique ID of the achievement associated with this trigger, if the trigger is an achievement.</p>
     */
    _FinalStage achievementId(Optional<String> achievementId);

    _FinalStage achievementId(String achievementId);

    /**
     * <p>The unique ID of the metric associated with this trigger, if the trigger is a metric.</p>
     */
    _FinalStage metricId(Optional<String> metricId);

    _FinalStage metricId(String metricId);

    /**
     * <p>The amount that a user must increase the metric to earn the points, if the trigger is a metric.</p>
     */
    _FinalStage metricThreshold(Optional<Integer> metricThreshold);

    _FinalStage metricThreshold(Integer metricThreshold);

    /**
     * <p>The number of consecutive streak periods that a user must complete to earn the points, if the trigger is a streak.</p>
     */
    _FinalStage streakLengthThreshold(Optional<Integer> streakLengthThreshold);

    _FinalStage streakLengthThreshold(Integer streakLengthThreshold);

    /**
     * <p>The name of the metric associated with this trigger, if the trigger is a metric.</p>
     */
    _FinalStage metricName(Optional<String> metricName);

    _FinalStage metricName(String metricName);

    /**
     * <p>The name of the achievement associated with this trigger, if the trigger is an achievement.</p>
     */
    _FinalStage achievementName(Optional<String> achievementName);

    _FinalStage achievementName(String achievementName);

    /**
     * <p>The time unit of the trigger, if the trigger is a time interval.</p>
     */
    _FinalStage timeUnit(Optional<PointsTriggerResponseTimeUnit> timeUnit);

    _FinalStage timeUnit(PointsTriggerResponseTimeUnit timeUnit);

    /**
     * <p>The interval of the trigger in the time unit, if the trigger is a time interval.</p>
     */
    _FinalStage timeInterval(Optional<Integer> timeInterval);

    _FinalStage timeInterval(Integer timeInterval);

    /**
     * <p>User attribute filters that must be met for this trigger to activate. Only present if the trigger has user attribute filters configured.</p>
     */
    _FinalStage userAttributes(
        Optional<List<PointsTriggerResponseUserAttributesItem>> userAttributes);

    _FinalStage userAttributes(List<PointsTriggerResponseUserAttributesItem> userAttributes);

    /**
     * <p>Event attribute filter that must be met for this trigger to activate. Only present if the trigger has an event filter configured.</p>
     */
    _FinalStage eventAttribute(Optional<PointsTriggerResponseEventAttribute> eventAttribute);

    _FinalStage eventAttribute(PointsTriggerResponseEventAttribute eventAttribute);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, TypeStage, PointsStage, StatusStage, CreatedStage, UpdatedStage, _FinalStage {
    private String id;

    private PointsTriggerResponseType type;

    private int points;

    private PointsTriggerResponseStatus status;

    private OffsetDateTime created;

    private OffsetDateTime updated;

    private Optional<PointsTriggerResponseEventAttribute> eventAttribute = Optional.empty();

    private Optional<List<PointsTriggerResponseUserAttributesItem>> userAttributes = Optional.empty();

    private Optional<Integer> timeInterval = Optional.empty();

    private Optional<PointsTriggerResponseTimeUnit> timeUnit = Optional.empty();

    private Optional<String> achievementName = Optional.empty();

    private Optional<String> metricName = Optional.empty();

    private Optional<Integer> streakLengthThreshold = Optional.empty();

    private Optional<Integer> metricThreshold = Optional.empty();

    private Optional<String> metricId = Optional.empty();

    private Optional<String> achievementId = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(PointsTriggerResponse other) {
      id(other.getId());
      type(other.getType());
      points(other.getPoints());
      status(other.getStatus());
      achievementId(other.getAchievementId());
      metricId(other.getMetricId());
      metricThreshold(other.getMetricThreshold());
      streakLengthThreshold(other.getStreakLengthThreshold());
      metricName(other.getMetricName());
      achievementName(other.getAchievementName());
      timeUnit(other.getTimeUnit());
      timeInterval(other.getTimeInterval());
      userAttributes(other.getUserAttributes());
      eventAttribute(other.getEventAttribute());
      created(other.getCreated());
      updated(other.getUpdated());
      return this;
    }

    /**
     * <p>The unique ID of the trigger.</p>
     * <p>The unique ID of the trigger.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("id")
    public TypeStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    /**
     * <p>The type of trigger.</p>
     * <p>The type of trigger.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("type")
    public PointsStage type(@NotNull PointsTriggerResponseType type) {
      this.type = Objects.requireNonNull(type, "type must not be null");
      return this;
    }

    /**
     * <p>The points awarded by this trigger.</p>
     * <p>The points awarded by this trigger.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("points")
    public StatusStage points(int points) {
      this.points = points;
      return this;
    }

    /**
     * <p>The status of the trigger.</p>
     * <p>The status of the trigger.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("status")
    public CreatedStage status(@NotNull PointsTriggerResponseStatus status) {
      this.status = Objects.requireNonNull(status, "status must not be null");
      return this;
    }

    /**
     * <p>The date and time the trigger was created, in ISO 8601 format.</p>
     * <p>The date and time the trigger was created, in ISO 8601 format.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("created")
    public UpdatedStage created(@NotNull OffsetDateTime created) {
      this.created = Objects.requireNonNull(created, "created must not be null");
      return this;
    }

    /**
     * <p>The date and time the trigger was last updated, in ISO 8601 format.</p>
     * <p>The date and time the trigger was last updated, in ISO 8601 format.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("updated")
    public _FinalStage updated(@NotNull OffsetDateTime updated) {
      this.updated = Objects.requireNonNull(updated, "updated must not be null");
      return this;
    }

    /**
     * <p>Event attribute filter that must be met for this trigger to activate. Only present if the trigger has an event filter configured.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage eventAttribute(PointsTriggerResponseEventAttribute eventAttribute) {
      this.eventAttribute = Optional.ofNullable(eventAttribute);
      return this;
    }

    /**
     * <p>Event attribute filter that must be met for this trigger to activate. Only present if the trigger has an event filter configured.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "eventAttribute",
        nulls = Nulls.SKIP
    )
    public _FinalStage eventAttribute(
        Optional<PointsTriggerResponseEventAttribute> eventAttribute) {
      this.eventAttribute = eventAttribute;
      return this;
    }

    /**
     * <p>User attribute filters that must be met for this trigger to activate. Only present if the trigger has user attribute filters configured.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage userAttributes(
        List<PointsTriggerResponseUserAttributesItem> userAttributes) {
      this.userAttributes = Optional.ofNullable(userAttributes);
      return this;
    }

    /**
     * <p>User attribute filters that must be met for this trigger to activate. Only present if the trigger has user attribute filters configured.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "userAttributes",
        nulls = Nulls.SKIP
    )
    public _FinalStage userAttributes(
        Optional<List<PointsTriggerResponseUserAttributesItem>> userAttributes) {
      this.userAttributes = userAttributes;
      return this;
    }

    /**
     * <p>The interval of the trigger in the time unit, if the trigger is a time interval.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage timeInterval(Integer timeInterval) {
      this.timeInterval = Optional.ofNullable(timeInterval);
      return this;
    }

    /**
     * <p>The interval of the trigger in the time unit, if the trigger is a time interval.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "timeInterval",
        nulls = Nulls.SKIP
    )
    public _FinalStage timeInterval(Optional<Integer> timeInterval) {
      this.timeInterval = timeInterval;
      return this;
    }

    /**
     * <p>The time unit of the trigger, if the trigger is a time interval.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage timeUnit(PointsTriggerResponseTimeUnit timeUnit) {
      this.timeUnit = Optional.ofNullable(timeUnit);
      return this;
    }

    /**
     * <p>The time unit of the trigger, if the trigger is a time interval.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "timeUnit",
        nulls = Nulls.SKIP
    )
    public _FinalStage timeUnit(Optional<PointsTriggerResponseTimeUnit> timeUnit) {
      this.timeUnit = timeUnit;
      return this;
    }

    /**
     * <p>The name of the achievement associated with this trigger, if the trigger is an achievement.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage achievementName(String achievementName) {
      this.achievementName = Optional.ofNullable(achievementName);
      return this;
    }

    /**
     * <p>The name of the achievement associated with this trigger, if the trigger is an achievement.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "achievementName",
        nulls = Nulls.SKIP
    )
    public _FinalStage achievementName(Optional<String> achievementName) {
      this.achievementName = achievementName;
      return this;
    }

    /**
     * <p>The name of the metric associated with this trigger, if the trigger is a metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage metricName(String metricName) {
      this.metricName = Optional.ofNullable(metricName);
      return this;
    }

    /**
     * <p>The name of the metric associated with this trigger, if the trigger is a metric.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "metricName",
        nulls = Nulls.SKIP
    )
    public _FinalStage metricName(Optional<String> metricName) {
      this.metricName = metricName;
      return this;
    }

    /**
     * <p>The number of consecutive streak periods that a user must complete to earn the points, if the trigger is a streak.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage streakLengthThreshold(Integer streakLengthThreshold) {
      this.streakLengthThreshold = Optional.ofNullable(streakLengthThreshold);
      return this;
    }

    /**
     * <p>The number of consecutive streak periods that a user must complete to earn the points, if the trigger is a streak.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "streakLengthThreshold",
        nulls = Nulls.SKIP
    )
    public _FinalStage streakLengthThreshold(Optional<Integer> streakLengthThreshold) {
      this.streakLengthThreshold = streakLengthThreshold;
      return this;
    }

    /**
     * <p>The amount that a user must increase the metric to earn the points, if the trigger is a metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage metricThreshold(Integer metricThreshold) {
      this.metricThreshold = Optional.ofNullable(metricThreshold);
      return this;
    }

    /**
     * <p>The amount that a user must increase the metric to earn the points, if the trigger is a metric.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "metricThreshold",
        nulls = Nulls.SKIP
    )
    public _FinalStage metricThreshold(Optional<Integer> metricThreshold) {
      this.metricThreshold = metricThreshold;
      return this;
    }

    /**
     * <p>The unique ID of the metric associated with this trigger, if the trigger is a metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage metricId(String metricId) {
      this.metricId = Optional.ofNullable(metricId);
      return this;
    }

    /**
     * <p>The unique ID of the metric associated with this trigger, if the trigger is a metric.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "metricId",
        nulls = Nulls.SKIP
    )
    public _FinalStage metricId(Optional<String> metricId) {
      this.metricId = metricId;
      return this;
    }

    /**
     * <p>The unique ID of the achievement associated with this trigger, if the trigger is an achievement.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage achievementId(String achievementId) {
      this.achievementId = Optional.ofNullable(achievementId);
      return this;
    }

    /**
     * <p>The unique ID of the achievement associated with this trigger, if the trigger is an achievement.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "achievementId",
        nulls = Nulls.SKIP
    )
    public _FinalStage achievementId(Optional<String> achievementId) {
      this.achievementId = achievementId;
      return this;
    }

    @java.lang.Override
    public PointsTriggerResponse build() {
      return new PointsTriggerResponse(id, type, points, status, achievementId, metricId, metricThreshold, streakLengthThreshold, metricName, achievementName, timeUnit, timeInterval, userAttributes, eventAttribute, created, updated, additionalProperties);
    }
  }
}
