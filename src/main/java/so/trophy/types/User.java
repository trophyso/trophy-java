package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = User.Builder.class
)
public final class User implements IUpsertedUser, IUpdatedUser {
  private final String id;

  private final String email;

  private final String name;

  private final Optional<String> tz;

  private final List<String> deviceTokens;

  private final boolean subscribeToEmails;

  private final Map<String, String> attributes;

  private final boolean control;

  private final OffsetDateTime created;

  private final OffsetDateTime updated;

  private final Map<String, Object> additionalProperties;

  private User(String id, String email, String name, Optional<String> tz, List<String> deviceTokens,
      boolean subscribeToEmails, Map<String, String> attributes, boolean control,
      OffsetDateTime created, OffsetDateTime updated, Map<String, Object> additionalProperties) {
    this.id = id;
    this.email = email;
    this.name = name;
    this.tz = tz;
    this.deviceTokens = deviceTokens;
    this.subscribeToEmails = subscribeToEmails;
    this.attributes = attributes;
    this.control = control;
    this.created = created;
    this.updated = updated;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The ID of the user in your database. Must be a string.
   */
  @JsonProperty("id")
  @java.lang.Override
  public String getId() {
    return id;
  }

  /**
   * @return The user's email address. Required if subscribeToEmails is true.
   */
  @JsonProperty("email")
  @java.lang.Override
  public String getEmail() {
    return email;
  }

  /**
   * @return The name to refer to the user by in emails.
   */
  @JsonProperty("name")
  @java.lang.Override
  public String getName() {
    return name;
  }

  /**
   * @return The user's timezone (used for email scheduling).
   */
  @JsonProperty("tz")
  @java.lang.Override
  public Optional<String> getTz() {
    return tz;
  }

  /**
   * @return The user's device tokens, used for push notifications.
   */
  @JsonProperty("deviceTokens")
  @java.lang.Override
  public List<String> getDeviceTokens() {
    return deviceTokens;
  }

  /**
   * @return Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.
   */
  @JsonProperty("subscribeToEmails")
  @java.lang.Override
  public boolean getSubscribeToEmails() {
    return subscribeToEmails;
  }

  /**
   * @return User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.
   */
  @JsonProperty("attributes")
  @java.lang.Override
  public Map<String, String> getAttributes() {
    return attributes;
  }

  /**
   * @return Whether the user is in the control group, meaning they do not receive emails or other communications from Trophy.
   */
  @JsonProperty("control")
  public boolean getControl() {
    return control;
  }

  /**
   * @return The date and time the user was created, in ISO 8601 format.
   */
  @JsonProperty("created")
  public OffsetDateTime getCreated() {
    return created;
  }

  /**
   * @return The date and time the user was last updated, in ISO 8601 format.
   */
  @JsonProperty("updated")
  public OffsetDateTime getUpdated() {
    return updated;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof User && equalTo((User) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(User other) {
    return id.equals(other.id) && email.equals(other.email) && name.equals(other.name) && tz.equals(other.tz) && deviceTokens.equals(other.deviceTokens) && subscribeToEmails == other.subscribeToEmails && attributes.equals(other.attributes) && control == other.control && created.equals(other.created) && updated.equals(other.updated);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.email, this.name, this.tz, this.deviceTokens, this.subscribeToEmails, this.attributes, this.control, this.created, this.updated);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    /**
     * <p>The ID of the user in your database. Must be a string.</p>
     */
    EmailStage id(@NotNull String id);

    Builder from(User other);
  }

  public interface EmailStage {
    /**
     * <p>The user's email address. Required if subscribeToEmails is true.</p>
     */
    NameStage email(@NotNull String email);
  }

  public interface NameStage {
    /**
     * <p>The name to refer to the user by in emails.</p>
     */
    SubscribeToEmailsStage name(@NotNull String name);
  }

  public interface SubscribeToEmailsStage {
    /**
     * <p>Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.</p>
     */
    ControlStage subscribeToEmails(boolean subscribeToEmails);
  }

  public interface ControlStage {
    /**
     * <p>Whether the user is in the control group, meaning they do not receive emails or other communications from Trophy.</p>
     */
    CreatedStage control(boolean control);
  }

  public interface CreatedStage {
    /**
     * <p>The date and time the user was created, in ISO 8601 format.</p>
     */
    UpdatedStage created(@NotNull OffsetDateTime created);
  }

  public interface UpdatedStage {
    /**
     * <p>The date and time the user was last updated, in ISO 8601 format.</p>
     */
    _FinalStage updated(@NotNull OffsetDateTime updated);
  }

  public interface _FinalStage {
    User build();

    /**
     * <p>The user's timezone (used for email scheduling).</p>
     */
    _FinalStage tz(Optional<String> tz);

    _FinalStage tz(String tz);

    /**
     * <p>The user's device tokens, used for push notifications.</p>
     */
    _FinalStage deviceTokens(List<String> deviceTokens);

    _FinalStage addDeviceTokens(String deviceTokens);

    _FinalStage addAllDeviceTokens(List<String> deviceTokens);

    /**
     * <p>User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.</p>
     */
    _FinalStage attributes(Map<String, String> attributes);

    _FinalStage putAllAttributes(Map<String, String> attributes);

    _FinalStage attributes(String key, String value);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, EmailStage, NameStage, SubscribeToEmailsStage, ControlStage, CreatedStage, UpdatedStage, _FinalStage {
    private String id;

    private String email;

    private String name;

    private boolean subscribeToEmails;

    private boolean control;

    private OffsetDateTime created;

    private OffsetDateTime updated;

    private Map<String, String> attributes = new LinkedHashMap<>();

    private List<String> deviceTokens = new ArrayList<>();

    private Optional<String> tz = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(User other) {
      id(other.getId());
      email(other.getEmail());
      name(other.getName());
      tz(other.getTz());
      deviceTokens(other.getDeviceTokens());
      subscribeToEmails(other.getSubscribeToEmails());
      attributes(other.getAttributes());
      control(other.getControl());
      created(other.getCreated());
      updated(other.getUpdated());
      return this;
    }

    /**
     * <p>The ID of the user in your database. Must be a string.</p>
     * <p>The ID of the user in your database. Must be a string.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("id")
    public EmailStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    /**
     * <p>The user's email address. Required if subscribeToEmails is true.</p>
     * <p>The user's email address. Required if subscribeToEmails is true.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("email")
    public NameStage email(@NotNull String email) {
      this.email = Objects.requireNonNull(email, "email must not be null");
      return this;
    }

    /**
     * <p>The name to refer to the user by in emails.</p>
     * <p>The name to refer to the user by in emails.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("name")
    public SubscribeToEmailsStage name(@NotNull String name) {
      this.name = Objects.requireNonNull(name, "name must not be null");
      return this;
    }

    /**
     * <p>Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.</p>
     * <p>Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("subscribeToEmails")
    public ControlStage subscribeToEmails(boolean subscribeToEmails) {
      this.subscribeToEmails = subscribeToEmails;
      return this;
    }

    /**
     * <p>Whether the user is in the control group, meaning they do not receive emails or other communications from Trophy.</p>
     * <p>Whether the user is in the control group, meaning they do not receive emails or other communications from Trophy.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("control")
    public CreatedStage control(boolean control) {
      this.control = control;
      return this;
    }

    /**
     * <p>The date and time the user was created, in ISO 8601 format.</p>
     * <p>The date and time the user was created, in ISO 8601 format.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("created")
    public UpdatedStage created(@NotNull OffsetDateTime created) {
      this.created = Objects.requireNonNull(created, "created must not be null");
      return this;
    }

    /**
     * <p>The date and time the user was last updated, in ISO 8601 format.</p>
     * <p>The date and time the user was last updated, in ISO 8601 format.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("updated")
    public _FinalStage updated(@NotNull OffsetDateTime updated) {
      this.updated = Objects.requireNonNull(updated, "updated must not be null");
      return this;
    }

    /**
     * <p>User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage attributes(String key, String value) {
      this.attributes.put(key, value);
      return this;
    }

    /**
     * <p>User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage putAllAttributes(Map<String, String> attributes) {
      if (attributes != null) {
        this.attributes.putAll(attributes);
      }
      return this;
    }

    /**
     * <p>User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "attributes",
        nulls = Nulls.SKIP
    )
    public _FinalStage attributes(Map<String, String> attributes) {
      this.attributes.clear();
      this.attributes.putAll(attributes);
      return this;
    }

    /**
     * <p>The user's device tokens, used for push notifications.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage addAllDeviceTokens(List<String> deviceTokens) {
      if (deviceTokens != null) {
        this.deviceTokens.addAll(deviceTokens);
      }
      return this;
    }

    /**
     * <p>The user's device tokens, used for push notifications.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage addDeviceTokens(String deviceTokens) {
      this.deviceTokens.add(deviceTokens);
      return this;
    }

    /**
     * <p>The user's device tokens, used for push notifications.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "deviceTokens",
        nulls = Nulls.SKIP
    )
    public _FinalStage deviceTokens(List<String> deviceTokens) {
      this.deviceTokens.clear();
      this.deviceTokens.addAll(deviceTokens);
      return this;
    }

    /**
     * <p>The user's timezone (used for email scheduling).</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage tz(String tz) {
      this.tz = Optional.ofNullable(tz);
      return this;
    }

    /**
     * <p>The user's timezone (used for email scheduling).</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "tz",
        nulls = Nulls.SKIP
    )
    public _FinalStage tz(Optional<String> tz) {
      this.tz = tz;
      return this;
    }

    @java.lang.Override
    public User build() {
      return new User(id, email, name, tz, deviceTokens, subscribeToEmails, attributes, control, created, updated, additionalProperties);
    }
  }
}
