package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = LeaderboardRanking.Builder.class
)
public final class LeaderboardRanking {
  private final String userId;

  private final Optional<String> userName;

  private final int rank;

  private final int value;

  private final Map<String, Object> additionalProperties;

  private LeaderboardRanking(String userId, Optional<String> userName, int rank, int value,
      Map<String, Object> additionalProperties) {
    this.userId = userId;
    this.userName = userName;
    this.rank = rank;
    this.value = value;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The ID of the user.
   */
  @JsonProperty("userId")
  public String getUserId() {
    return userId;
  }

  /**
   * @return The name of the user. May be null if no name is set.
   */
  @JsonProperty("userName")
  public Optional<String> getUserName() {
    return userName;
  }

  /**
   * @return The user's rank in the leaderboard.
   */
  @JsonProperty("rank")
  public int getRank() {
    return rank;
  }

  /**
   * @return The user's value for this leaderboard (points, metric value, etc.).
   */
  @JsonProperty("value")
  public int getValue() {
    return value;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof LeaderboardRanking && equalTo((LeaderboardRanking) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(LeaderboardRanking other) {
    return userId.equals(other.userId) && userName.equals(other.userName) && rank == other.rank && value == other.value;
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.userId, this.userName, this.rank, this.value);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UserIdStage builder() {
    return new Builder();
  }

  public interface UserIdStage {
    /**
     * <p>The ID of the user.</p>
     */
    RankStage userId(@NotNull String userId);

    Builder from(LeaderboardRanking other);
  }

  public interface RankStage {
    /**
     * <p>The user's rank in the leaderboard.</p>
     */
    ValueStage rank(int rank);
  }

  public interface ValueStage {
    /**
     * <p>The user's value for this leaderboard (points, metric value, etc.).</p>
     */
    _FinalStage value(int value);
  }

  public interface _FinalStage {
    LeaderboardRanking build();

    /**
     * <p>The name of the user. May be null if no name is set.</p>
     */
    _FinalStage userName(Optional<String> userName);

    _FinalStage userName(String userName);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UserIdStage, RankStage, ValueStage, _FinalStage {
    private String userId;

    private int rank;

    private int value;

    private Optional<String> userName = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(LeaderboardRanking other) {
      userId(other.getUserId());
      userName(other.getUserName());
      rank(other.getRank());
      value(other.getValue());
      return this;
    }

    /**
     * <p>The ID of the user.</p>
     * <p>The ID of the user.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("userId")
    public RankStage userId(@NotNull String userId) {
      this.userId = Objects.requireNonNull(userId, "userId must not be null");
      return this;
    }

    /**
     * <p>The user's rank in the leaderboard.</p>
     * <p>The user's rank in the leaderboard.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("rank")
    public ValueStage rank(int rank) {
      this.rank = rank;
      return this;
    }

    /**
     * <p>The user's value for this leaderboard (points, metric value, etc.).</p>
     * <p>The user's value for this leaderboard (points, metric value, etc.).</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("value")
    public _FinalStage value(int value) {
      this.value = value;
      return this;
    }

    /**
     * <p>The name of the user. May be null if no name is set.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage userName(String userName) {
      this.userName = Optional.ofNullable(userName);
      return this;
    }

    /**
     * <p>The name of the user. May be null if no name is set.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "userName",
        nulls = Nulls.SKIP
    )
    public _FinalStage userName(Optional<String> userName) {
      this.userName = userName;
      return this;
    }

    @java.lang.Override
    public LeaderboardRanking build() {
      return new LeaderboardRanking(userId, userName, rank, value, additionalProperties);
    }
  }
}
