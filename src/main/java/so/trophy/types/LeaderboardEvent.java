package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = LeaderboardEvent.Builder.class
)
public final class LeaderboardEvent {
  private final Optional<OffsetDateTime> timestamp;

  private final Optional<Integer> previousRank;

  private final Optional<Integer> rank;

  private final Optional<Integer> previousValue;

  private final Optional<Integer> value;

  private final Map<String, Object> additionalProperties;

  private LeaderboardEvent(Optional<OffsetDateTime> timestamp, Optional<Integer> previousRank,
      Optional<Integer> rank, Optional<Integer> previousValue, Optional<Integer> value,
      Map<String, Object> additionalProperties) {
    this.timestamp = timestamp;
    this.previousRank = previousRank;
    this.rank = rank;
    this.previousValue = previousValue;
    this.value = value;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The timestamp when the event occurred.
   */
  @JsonProperty("timestamp")
  public Optional<OffsetDateTime> getTimestamp() {
    return timestamp;
  }

  /**
   * @return The user's rank before this event, or null if they were not on the leaderboard.
   */
  @JsonProperty("previousRank")
  public Optional<Integer> getPreviousRank() {
    return previousRank;
  }

  /**
   * @return The user's rank after this event, or null if they are no longer on the leaderboard.
   */
  @JsonProperty("rank")
  public Optional<Integer> getRank() {
    return rank;
  }

  /**
   * @return The user's value before this event, or null if they were not on the leaderboard.
   */
  @JsonProperty("previousValue")
  public Optional<Integer> getPreviousValue() {
    return previousValue;
  }

  /**
   * @return The user's value after this event, or null if they are no longer on the leaderboard.
   */
  @JsonProperty("value")
  public Optional<Integer> getValue() {
    return value;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof LeaderboardEvent && equalTo((LeaderboardEvent) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(LeaderboardEvent other) {
    return timestamp.equals(other.timestamp) && previousRank.equals(other.previousRank) && rank.equals(other.rank) && previousValue.equals(other.previousValue) && value.equals(other.value);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.timestamp, this.previousRank, this.rank, this.previousValue, this.value);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<OffsetDateTime> timestamp = Optional.empty();

    private Optional<Integer> previousRank = Optional.empty();

    private Optional<Integer> rank = Optional.empty();

    private Optional<Integer> previousValue = Optional.empty();

    private Optional<Integer> value = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(LeaderboardEvent other) {
      timestamp(other.getTimestamp());
      previousRank(other.getPreviousRank());
      rank(other.getRank());
      previousValue(other.getPreviousValue());
      value(other.getValue());
      return this;
    }

    /**
     * <p>The timestamp when the event occurred.</p>
     */
    @JsonSetter(
        value = "timestamp",
        nulls = Nulls.SKIP
    )
    public Builder timestamp(Optional<OffsetDateTime> timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public Builder timestamp(OffsetDateTime timestamp) {
      this.timestamp = Optional.ofNullable(timestamp);
      return this;
    }

    /**
     * <p>The user's rank before this event, or null if they were not on the leaderboard.</p>
     */
    @JsonSetter(
        value = "previousRank",
        nulls = Nulls.SKIP
    )
    public Builder previousRank(Optional<Integer> previousRank) {
      this.previousRank = previousRank;
      return this;
    }

    public Builder previousRank(Integer previousRank) {
      this.previousRank = Optional.ofNullable(previousRank);
      return this;
    }

    /**
     * <p>The user's rank after this event, or null if they are no longer on the leaderboard.</p>
     */
    @JsonSetter(
        value = "rank",
        nulls = Nulls.SKIP
    )
    public Builder rank(Optional<Integer> rank) {
      this.rank = rank;
      return this;
    }

    public Builder rank(Integer rank) {
      this.rank = Optional.ofNullable(rank);
      return this;
    }

    /**
     * <p>The user's value before this event, or null if they were not on the leaderboard.</p>
     */
    @JsonSetter(
        value = "previousValue",
        nulls = Nulls.SKIP
    )
    public Builder previousValue(Optional<Integer> previousValue) {
      this.previousValue = previousValue;
      return this;
    }

    public Builder previousValue(Integer previousValue) {
      this.previousValue = Optional.ofNullable(previousValue);
      return this;
    }

    /**
     * <p>The user's value after this event, or null if they are no longer on the leaderboard.</p>
     */
    @JsonSetter(
        value = "value",
        nulls = Nulls.SKIP
    )
    public Builder value(Optional<Integer> value) {
      this.value = value;
      return this;
    }

    public Builder value(Integer value) {
      this.value = Optional.ofNullable(value);
      return this;
    }

    public LeaderboardEvent build() {
      return new LeaderboardEvent(timestamp, previousRank, rank, previousValue, value, additionalProperties);
    }
  }
}
