package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = LeaderboardResponse.Builder.class
)
public final class LeaderboardResponse implements ILeaderboardResponse {
  private final String id;

  private final String name;

  private final String key;

  private final LeaderboardResponseRankBy rankBy;

  private final Optional<String> breakdownAttribute;

  private final Optional<String> metricKey;

  private final Optional<String> metricName;

  private final Optional<String> pointsSystemKey;

  private final Optional<String> pointsSystemName;

  private final String description;

  private final String start;

  private final Optional<String> end;

  private final int maxParticipants;

  private final Optional<LeaderboardResponseRunUnit> runUnit;

  private final int runInterval;

  private final Map<String, Object> additionalProperties;

  private LeaderboardResponse(String id, String name, String key, LeaderboardResponseRankBy rankBy,
      Optional<String> breakdownAttribute, Optional<String> metricKey, Optional<String> metricName,
      Optional<String> pointsSystemKey, Optional<String> pointsSystemName, String description,
      String start, Optional<String> end, int maxParticipants,
      Optional<LeaderboardResponseRunUnit> runUnit, int runInterval,
      Map<String, Object> additionalProperties) {
    this.id = id;
    this.name = name;
    this.key = key;
    this.rankBy = rankBy;
    this.breakdownAttribute = breakdownAttribute;
    this.metricKey = metricKey;
    this.metricName = metricName;
    this.pointsSystemKey = pointsSystemKey;
    this.pointsSystemName = pointsSystemName;
    this.description = description;
    this.start = start;
    this.end = end;
    this.maxParticipants = maxParticipants;
    this.runUnit = runUnit;
    this.runInterval = runInterval;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The unique ID of the leaderboard.
   */
  @JsonProperty("id")
  @java.lang.Override
  public String getId() {
    return id;
  }

  /**
   * @return The user-facing name of the leaderboard.
   */
  @JsonProperty("name")
  @java.lang.Override
  public String getName() {
    return name;
  }

  /**
   * @return The unique key used to reference the leaderboard in APIs.
   */
  @JsonProperty("key")
  @java.lang.Override
  public String getKey() {
    return key;
  }

  /**
   * @return What the leaderboard ranks by.
   */
  @JsonProperty("rankBy")
  public LeaderboardResponseRankBy getRankBy() {
    return rankBy;
  }

  /**
   * @return The key of the attribute to break down this leaderboard by.
   */
  @JsonProperty("breakdownAttribute")
  @java.lang.Override
  public Optional<String> getBreakdownAttribute() {
    return breakdownAttribute;
  }

  /**
   * @return The key of the metric to rank by, if rankBy is 'metric'.
   */
  @JsonProperty("metricKey")
  @java.lang.Override
  public Optional<String> getMetricKey() {
    return metricKey;
  }

  /**
   * @return The name of the metric to rank by, if rankBy is 'metric'.
   */
  @JsonProperty("metricName")
  @java.lang.Override
  public Optional<String> getMetricName() {
    return metricName;
  }

  /**
   * @return The key of the points system to rank by, if rankBy is 'points'.
   */
  @JsonProperty("pointsSystemKey")
  @java.lang.Override
  public Optional<String> getPointsSystemKey() {
    return pointsSystemKey;
  }

  /**
   * @return The name of the points system to rank by, if rankBy is 'points'.
   */
  @JsonProperty("pointsSystemName")
  @java.lang.Override
  public Optional<String> getPointsSystemName() {
    return pointsSystemName;
  }

  /**
   * @return The user-facing description of the leaderboard.
   */
  @JsonProperty("description")
  @java.lang.Override
  public String getDescription() {
    return description;
  }

  /**
   * @return The start date of the leaderboard in YYYY-MM-DD format.
   */
  @JsonProperty("start")
  @java.lang.Override
  public String getStart() {
    return start;
  }

  /**
   * @return The end date of the leaderboard in YYYY-MM-DD format, or null if it runs forever.
   */
  @JsonProperty("end")
  @java.lang.Override
  public Optional<String> getEnd() {
    return end;
  }

  /**
   * @return The maximum number of participants in the leaderboard.
   */
  @JsonProperty("maxParticipants")
  @java.lang.Override
  public int getMaxParticipants() {
    return maxParticipants;
  }

  /**
   * @return The repetition type for recurring leaderboards, or null for one-time leaderboards.
   */
  @JsonProperty("runUnit")
  public Optional<LeaderboardResponseRunUnit> getRunUnit() {
    return runUnit;
  }

  /**
   * @return The interval between repetitions, relative to the start date and repetition type.
   */
  @JsonProperty("runInterval")
  @java.lang.Override
  public int getRunInterval() {
    return runInterval;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof LeaderboardResponse && equalTo((LeaderboardResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(LeaderboardResponse other) {
    return id.equals(other.id) && name.equals(other.name) && key.equals(other.key) && rankBy.equals(other.rankBy) && breakdownAttribute.equals(other.breakdownAttribute) && metricKey.equals(other.metricKey) && metricName.equals(other.metricName) && pointsSystemKey.equals(other.pointsSystemKey) && pointsSystemName.equals(other.pointsSystemName) && description.equals(other.description) && start.equals(other.start) && end.equals(other.end) && maxParticipants == other.maxParticipants && runUnit.equals(other.runUnit) && runInterval == other.runInterval;
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.name, this.key, this.rankBy, this.breakdownAttribute, this.metricKey, this.metricName, this.pointsSystemKey, this.pointsSystemName, this.description, this.start, this.end, this.maxParticipants, this.runUnit, this.runInterval);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    /**
     * <p>The unique ID of the leaderboard.</p>
     */
    NameStage id(@NotNull String id);

    Builder from(LeaderboardResponse other);
  }

  public interface NameStage {
    /**
     * <p>The user-facing name of the leaderboard.</p>
     */
    KeyStage name(@NotNull String name);
  }

  public interface KeyStage {
    /**
     * <p>The unique key used to reference the leaderboard in APIs.</p>
     */
    RankByStage key(@NotNull String key);
  }

  public interface RankByStage {
    /**
     * <p>What the leaderboard ranks by.</p>
     */
    DescriptionStage rankBy(@NotNull LeaderboardResponseRankBy rankBy);
  }

  public interface DescriptionStage {
    /**
     * <p>The user-facing description of the leaderboard.</p>
     */
    StartStage description(@NotNull String description);
  }

  public interface StartStage {
    /**
     * <p>The start date of the leaderboard in YYYY-MM-DD format.</p>
     */
    MaxParticipantsStage start(@NotNull String start);
  }

  public interface MaxParticipantsStage {
    /**
     * <p>The maximum number of participants in the leaderboard.</p>
     */
    RunIntervalStage maxParticipants(int maxParticipants);
  }

  public interface RunIntervalStage {
    /**
     * <p>The interval between repetitions, relative to the start date and repetition type.</p>
     */
    _FinalStage runInterval(int runInterval);
  }

  public interface _FinalStage {
    LeaderboardResponse build();

    /**
     * <p>The key of the attribute to break down this leaderboard by.</p>
     */
    _FinalStage breakdownAttribute(Optional<String> breakdownAttribute);

    _FinalStage breakdownAttribute(String breakdownAttribute);

    /**
     * <p>The key of the metric to rank by, if rankBy is 'metric'.</p>
     */
    _FinalStage metricKey(Optional<String> metricKey);

    _FinalStage metricKey(String metricKey);

    /**
     * <p>The name of the metric to rank by, if rankBy is 'metric'.</p>
     */
    _FinalStage metricName(Optional<String> metricName);

    _FinalStage metricName(String metricName);

    /**
     * <p>The key of the points system to rank by, if rankBy is 'points'.</p>
     */
    _FinalStage pointsSystemKey(Optional<String> pointsSystemKey);

    _FinalStage pointsSystemKey(String pointsSystemKey);

    /**
     * <p>The name of the points system to rank by, if rankBy is 'points'.</p>
     */
    _FinalStage pointsSystemName(Optional<String> pointsSystemName);

    _FinalStage pointsSystemName(String pointsSystemName);

    /**
     * <p>The end date of the leaderboard in YYYY-MM-DD format, or null if it runs forever.</p>
     */
    _FinalStage end(Optional<String> end);

    _FinalStage end(String end);

    /**
     * <p>The repetition type for recurring leaderboards, or null for one-time leaderboards.</p>
     */
    _FinalStage runUnit(Optional<LeaderboardResponseRunUnit> runUnit);

    _FinalStage runUnit(LeaderboardResponseRunUnit runUnit);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, NameStage, KeyStage, RankByStage, DescriptionStage, StartStage, MaxParticipantsStage, RunIntervalStage, _FinalStage {
    private String id;

    private String name;

    private String key;

    private LeaderboardResponseRankBy rankBy;

    private String description;

    private String start;

    private int maxParticipants;

    private int runInterval;

    private Optional<LeaderboardResponseRunUnit> runUnit = Optional.empty();

    private Optional<String> end = Optional.empty();

    private Optional<String> pointsSystemName = Optional.empty();

    private Optional<String> pointsSystemKey = Optional.empty();

    private Optional<String> metricName = Optional.empty();

    private Optional<String> metricKey = Optional.empty();

    private Optional<String> breakdownAttribute = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(LeaderboardResponse other) {
      id(other.getId());
      name(other.getName());
      key(other.getKey());
      rankBy(other.getRankBy());
      breakdownAttribute(other.getBreakdownAttribute());
      metricKey(other.getMetricKey());
      metricName(other.getMetricName());
      pointsSystemKey(other.getPointsSystemKey());
      pointsSystemName(other.getPointsSystemName());
      description(other.getDescription());
      start(other.getStart());
      end(other.getEnd());
      maxParticipants(other.getMaxParticipants());
      runUnit(other.getRunUnit());
      runInterval(other.getRunInterval());
      return this;
    }

    /**
     * <p>The unique ID of the leaderboard.</p>
     * <p>The unique ID of the leaderboard.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("id")
    public NameStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    /**
     * <p>The user-facing name of the leaderboard.</p>
     * <p>The user-facing name of the leaderboard.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("name")
    public KeyStage name(@NotNull String name) {
      this.name = Objects.requireNonNull(name, "name must not be null");
      return this;
    }

    /**
     * <p>The unique key used to reference the leaderboard in APIs.</p>
     * <p>The unique key used to reference the leaderboard in APIs.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("key")
    public RankByStage key(@NotNull String key) {
      this.key = Objects.requireNonNull(key, "key must not be null");
      return this;
    }

    /**
     * <p>What the leaderboard ranks by.</p>
     * <p>What the leaderboard ranks by.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("rankBy")
    public DescriptionStage rankBy(@NotNull LeaderboardResponseRankBy rankBy) {
      this.rankBy = Objects.requireNonNull(rankBy, "rankBy must not be null");
      return this;
    }

    /**
     * <p>The user-facing description of the leaderboard.</p>
     * <p>The user-facing description of the leaderboard.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("description")
    public StartStage description(@NotNull String description) {
      this.description = Objects.requireNonNull(description, "description must not be null");
      return this;
    }

    /**
     * <p>The start date of the leaderboard in YYYY-MM-DD format.</p>
     * <p>The start date of the leaderboard in YYYY-MM-DD format.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("start")
    public MaxParticipantsStage start(@NotNull String start) {
      this.start = Objects.requireNonNull(start, "start must not be null");
      return this;
    }

    /**
     * <p>The maximum number of participants in the leaderboard.</p>
     * <p>The maximum number of participants in the leaderboard.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("maxParticipants")
    public RunIntervalStage maxParticipants(int maxParticipants) {
      this.maxParticipants = maxParticipants;
      return this;
    }

    /**
     * <p>The interval between repetitions, relative to the start date and repetition type.</p>
     * <p>The interval between repetitions, relative to the start date and repetition type.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("runInterval")
    public _FinalStage runInterval(int runInterval) {
      this.runInterval = runInterval;
      return this;
    }

    /**
     * <p>The repetition type for recurring leaderboards, or null for one-time leaderboards.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage runUnit(LeaderboardResponseRunUnit runUnit) {
      this.runUnit = Optional.ofNullable(runUnit);
      return this;
    }

    /**
     * <p>The repetition type for recurring leaderboards, or null for one-time leaderboards.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "runUnit",
        nulls = Nulls.SKIP
    )
    public _FinalStage runUnit(Optional<LeaderboardResponseRunUnit> runUnit) {
      this.runUnit = runUnit;
      return this;
    }

    /**
     * <p>The end date of the leaderboard in YYYY-MM-DD format, or null if it runs forever.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage end(String end) {
      this.end = Optional.ofNullable(end);
      return this;
    }

    /**
     * <p>The end date of the leaderboard in YYYY-MM-DD format, or null if it runs forever.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "end",
        nulls = Nulls.SKIP
    )
    public _FinalStage end(Optional<String> end) {
      this.end = end;
      return this;
    }

    /**
     * <p>The name of the points system to rank by, if rankBy is 'points'.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage pointsSystemName(String pointsSystemName) {
      this.pointsSystemName = Optional.ofNullable(pointsSystemName);
      return this;
    }

    /**
     * <p>The name of the points system to rank by, if rankBy is 'points'.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "pointsSystemName",
        nulls = Nulls.SKIP
    )
    public _FinalStage pointsSystemName(Optional<String> pointsSystemName) {
      this.pointsSystemName = pointsSystemName;
      return this;
    }

    /**
     * <p>The key of the points system to rank by, if rankBy is 'points'.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage pointsSystemKey(String pointsSystemKey) {
      this.pointsSystemKey = Optional.ofNullable(pointsSystemKey);
      return this;
    }

    /**
     * <p>The key of the points system to rank by, if rankBy is 'points'.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "pointsSystemKey",
        nulls = Nulls.SKIP
    )
    public _FinalStage pointsSystemKey(Optional<String> pointsSystemKey) {
      this.pointsSystemKey = pointsSystemKey;
      return this;
    }

    /**
     * <p>The name of the metric to rank by, if rankBy is 'metric'.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage metricName(String metricName) {
      this.metricName = Optional.ofNullable(metricName);
      return this;
    }

    /**
     * <p>The name of the metric to rank by, if rankBy is 'metric'.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "metricName",
        nulls = Nulls.SKIP
    )
    public _FinalStage metricName(Optional<String> metricName) {
      this.metricName = metricName;
      return this;
    }

    /**
     * <p>The key of the metric to rank by, if rankBy is 'metric'.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage metricKey(String metricKey) {
      this.metricKey = Optional.ofNullable(metricKey);
      return this;
    }

    /**
     * <p>The key of the metric to rank by, if rankBy is 'metric'.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "metricKey",
        nulls = Nulls.SKIP
    )
    public _FinalStage metricKey(Optional<String> metricKey) {
      this.metricKey = metricKey;
      return this;
    }

    /**
     * <p>The key of the attribute to break down this leaderboard by.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage breakdownAttribute(String breakdownAttribute) {
      this.breakdownAttribute = Optional.ofNullable(breakdownAttribute);
      return this;
    }

    /**
     * <p>The key of the attribute to break down this leaderboard by.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "breakdownAttribute",
        nulls = Nulls.SKIP
    )
    public _FinalStage breakdownAttribute(Optional<String> breakdownAttribute) {
      this.breakdownAttribute = breakdownAttribute;
      return this;
    }

    @java.lang.Override
    public LeaderboardResponse build() {
      return new LeaderboardResponse(id, name, key, rankBy, breakdownAttribute, metricKey, metricName, pointsSystemKey, pointsSystemName, description, start, end, maxParticipants, runUnit, runInterval, additionalProperties);
    }
  }
}
