package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = StreakResponseStreakHistoryItem.Builder.class
)
public final class StreakResponseStreakHistoryItem {
  private final String periodStart;

  private final String periodEnd;

  private final int length;

  private final Optional<Boolean> usedFreeze;

  private final Map<String, Object> additionalProperties;

  private StreakResponseStreakHistoryItem(String periodStart, String periodEnd, int length,
      Optional<Boolean> usedFreeze, Map<String, Object> additionalProperties) {
    this.periodStart = periodStart;
    this.periodEnd = periodEnd;
    this.length = length;
    this.usedFreeze = usedFreeze;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The date this streak period started.
   */
  @JsonProperty("periodStart")
  public String getPeriodStart() {
    return periodStart;
  }

  /**
   * @return The date this streak period ended.
   */
  @JsonProperty("periodEnd")
  public String getPeriodEnd() {
    return periodEnd;
  }

  /**
   * @return The length of the user's streak during this period.
   */
  @JsonProperty("length")
  public int getLength() {
    return length;
  }

  /**
   * @return Whether the user used a streak freeze during this period. Only present if the organization has enabled streak freezes.
   */
  @JsonProperty("usedFreeze")
  public Optional<Boolean> getUsedFreeze() {
    return usedFreeze;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof StreakResponseStreakHistoryItem && equalTo((StreakResponseStreakHistoryItem) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(StreakResponseStreakHistoryItem other) {
    return periodStart.equals(other.periodStart) && periodEnd.equals(other.periodEnd) && length == other.length && usedFreeze.equals(other.usedFreeze);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.periodStart, this.periodEnd, this.length, this.usedFreeze);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static PeriodStartStage builder() {
    return new Builder();
  }

  public interface PeriodStartStage {
    PeriodEndStage periodStart(@NotNull String periodStart);

    Builder from(StreakResponseStreakHistoryItem other);
  }

  public interface PeriodEndStage {
    LengthStage periodEnd(@NotNull String periodEnd);
  }

  public interface LengthStage {
    _FinalStage length(int length);
  }

  public interface _FinalStage {
    StreakResponseStreakHistoryItem build();

    _FinalStage usedFreeze(Optional<Boolean> usedFreeze);

    _FinalStage usedFreeze(Boolean usedFreeze);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements PeriodStartStage, PeriodEndStage, LengthStage, _FinalStage {
    private String periodStart;

    private String periodEnd;

    private int length;

    private Optional<Boolean> usedFreeze = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(StreakResponseStreakHistoryItem other) {
      periodStart(other.getPeriodStart());
      periodEnd(other.getPeriodEnd());
      length(other.getLength());
      usedFreeze(other.getUsedFreeze());
      return this;
    }

    /**
     * <p>The date this streak period started.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("periodStart")
    public PeriodEndStage periodStart(@NotNull String periodStart) {
      this.periodStart = Objects.requireNonNull(periodStart, "periodStart must not be null");
      return this;
    }

    /**
     * <p>The date this streak period ended.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("periodEnd")
    public LengthStage periodEnd(@NotNull String periodEnd) {
      this.periodEnd = Objects.requireNonNull(periodEnd, "periodEnd must not be null");
      return this;
    }

    /**
     * <p>The length of the user's streak during this period.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("length")
    public _FinalStage length(int length) {
      this.length = length;
      return this;
    }

    /**
     * <p>Whether the user used a streak freeze during this period. Only present if the organization has enabled streak freezes.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage usedFreeze(Boolean usedFreeze) {
      this.usedFreeze = Optional.ofNullable(usedFreeze);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "usedFreeze",
        nulls = Nulls.SKIP
    )
    public _FinalStage usedFreeze(Optional<Boolean> usedFreeze) {
      this.usedFreeze = usedFreeze;
      return this;
    }

    @java.lang.Override
    public StreakResponseStreakHistoryItem build() {
      return new StreakResponseStreakHistoryItem(periodStart, periodEnd, length, usedFreeze, additionalProperties);
    }
  }
}
