package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = BaseStreakResponse.Builder.class
)
public final class BaseStreakResponse implements IBaseStreakResponse {
  private final int length;

  private final StreakFrequency frequency;

  private final Optional<String> started;

  private final Optional<String> periodStart;

  private final Optional<String> periodEnd;

  private final Optional<String> expires;

  private final Optional<Integer> freezes;

  private final Optional<Integer> maxFreezes;

  private final Optional<Integer> freezeAutoEarnInterval;

  private final Optional<Integer> freezeAutoEarnAmount;

  private final Map<String, Object> additionalProperties;

  private BaseStreakResponse(int length, StreakFrequency frequency, Optional<String> started,
      Optional<String> periodStart, Optional<String> periodEnd, Optional<String> expires,
      Optional<Integer> freezes, Optional<Integer> maxFreezes,
      Optional<Integer> freezeAutoEarnInterval, Optional<Integer> freezeAutoEarnAmount,
      Map<String, Object> additionalProperties) {
    this.length = length;
    this.frequency = frequency;
    this.started = started;
    this.periodStart = periodStart;
    this.periodEnd = periodEnd;
    this.expires = expires;
    this.freezes = freezes;
    this.maxFreezes = maxFreezes;
    this.freezeAutoEarnInterval = freezeAutoEarnInterval;
    this.freezeAutoEarnAmount = freezeAutoEarnAmount;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The length of the user's current streak.
   */
  @JsonProperty("length")
  @java.lang.Override
  public int getLength() {
    return length;
  }

  /**
   * @return The frequency of the streak.
   */
  @JsonProperty("frequency")
  @java.lang.Override
  public StreakFrequency getFrequency() {
    return frequency;
  }

  /**
   * @return The date the streak started.
   */
  @JsonProperty("started")
  @java.lang.Override
  public Optional<String> getStarted() {
    return started;
  }

  /**
   * @return The start date of the current streak period.
   */
  @JsonProperty("periodStart")
  @java.lang.Override
  public Optional<String> getPeriodStart() {
    return periodStart;
  }

  /**
   * @return The end date of the current streak period.
   */
  @JsonProperty("periodEnd")
  @java.lang.Override
  public Optional<String> getPeriodEnd() {
    return periodEnd;
  }

  /**
   * @return The date the streak will expire if the user does not increment a metric.
   */
  @JsonProperty("expires")
  @java.lang.Override
  public Optional<String> getExpires() {
    return expires;
  }

  /**
   * @return The number of available streak freezes. Only present if the organization has enabled streak freezes.
   */
  @JsonProperty("freezes")
  @java.lang.Override
  public Optional<Integer> getFreezes() {
    return freezes;
  }

  /**
   * @return The maximum number of streak freezes a user can have. Only present if the organization has enabled streak freezes.
   */
  @JsonProperty("maxFreezes")
  @java.lang.Override
  public Optional<Integer> getMaxFreezes() {
    return maxFreezes;
  }

  /**
   * @return The interval at which the user will earn streak freezes, in days. Only present if the organization has enabled streak freeze auto-earn.
   */
  @JsonProperty("freezeAutoEarnInterval")
  @java.lang.Override
  public Optional<Integer> getFreezeAutoEarnInterval() {
    return freezeAutoEarnInterval;
  }

  /**
   * @return The amount of streak freezes the user will earn per interval. Only present if the organization has enabled streak freeze auto-earn.
   */
  @JsonProperty("freezeAutoEarnAmount")
  @java.lang.Override
  public Optional<Integer> getFreezeAutoEarnAmount() {
    return freezeAutoEarnAmount;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BaseStreakResponse && equalTo((BaseStreakResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(BaseStreakResponse other) {
    return length == other.length && frequency.equals(other.frequency) && started.equals(other.started) && periodStart.equals(other.periodStart) && periodEnd.equals(other.periodEnd) && expires.equals(other.expires) && freezes.equals(other.freezes) && maxFreezes.equals(other.maxFreezes) && freezeAutoEarnInterval.equals(other.freezeAutoEarnInterval) && freezeAutoEarnAmount.equals(other.freezeAutoEarnAmount);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.length, this.frequency, this.started, this.periodStart, this.periodEnd, this.expires, this.freezes, this.maxFreezes, this.freezeAutoEarnInterval, this.freezeAutoEarnAmount);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static LengthStage builder() {
    return new Builder();
  }

  public interface LengthStage {
    /**
     * <p>The length of the user's current streak.</p>
     */
    FrequencyStage length(int length);

    Builder from(BaseStreakResponse other);
  }

  public interface FrequencyStage {
    /**
     * <p>The frequency of the streak.</p>
     */
    _FinalStage frequency(@NotNull StreakFrequency frequency);
  }

  public interface _FinalStage {
    BaseStreakResponse build();

    /**
     * <p>The date the streak started.</p>
     */
    _FinalStage started(Optional<String> started);

    _FinalStage started(String started);

    /**
     * <p>The start date of the current streak period.</p>
     */
    _FinalStage periodStart(Optional<String> periodStart);

    _FinalStage periodStart(String periodStart);

    /**
     * <p>The end date of the current streak period.</p>
     */
    _FinalStage periodEnd(Optional<String> periodEnd);

    _FinalStage periodEnd(String periodEnd);

    /**
     * <p>The date the streak will expire if the user does not increment a metric.</p>
     */
    _FinalStage expires(Optional<String> expires);

    _FinalStage expires(String expires);

    /**
     * <p>The number of available streak freezes. Only present if the organization has enabled streak freezes.</p>
     */
    _FinalStage freezes(Optional<Integer> freezes);

    _FinalStage freezes(Integer freezes);

    /**
     * <p>The maximum number of streak freezes a user can have. Only present if the organization has enabled streak freezes.</p>
     */
    _FinalStage maxFreezes(Optional<Integer> maxFreezes);

    _FinalStage maxFreezes(Integer maxFreezes);

    /**
     * <p>The interval at which the user will earn streak freezes, in days. Only present if the organization has enabled streak freeze auto-earn.</p>
     */
    _FinalStage freezeAutoEarnInterval(Optional<Integer> freezeAutoEarnInterval);

    _FinalStage freezeAutoEarnInterval(Integer freezeAutoEarnInterval);

    /**
     * <p>The amount of streak freezes the user will earn per interval. Only present if the organization has enabled streak freeze auto-earn.</p>
     */
    _FinalStage freezeAutoEarnAmount(Optional<Integer> freezeAutoEarnAmount);

    _FinalStage freezeAutoEarnAmount(Integer freezeAutoEarnAmount);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements LengthStage, FrequencyStage, _FinalStage {
    private int length;

    private StreakFrequency frequency;

    private Optional<Integer> freezeAutoEarnAmount = Optional.empty();

    private Optional<Integer> freezeAutoEarnInterval = Optional.empty();

    private Optional<Integer> maxFreezes = Optional.empty();

    private Optional<Integer> freezes = Optional.empty();

    private Optional<String> expires = Optional.empty();

    private Optional<String> periodEnd = Optional.empty();

    private Optional<String> periodStart = Optional.empty();

    private Optional<String> started = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(BaseStreakResponse other) {
      length(other.getLength());
      frequency(other.getFrequency());
      started(other.getStarted());
      periodStart(other.getPeriodStart());
      periodEnd(other.getPeriodEnd());
      expires(other.getExpires());
      freezes(other.getFreezes());
      maxFreezes(other.getMaxFreezes());
      freezeAutoEarnInterval(other.getFreezeAutoEarnInterval());
      freezeAutoEarnAmount(other.getFreezeAutoEarnAmount());
      return this;
    }

    /**
     * <p>The length of the user's current streak.</p>
     * <p>The length of the user's current streak.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("length")
    public FrequencyStage length(int length) {
      this.length = length;
      return this;
    }

    /**
     * <p>The frequency of the streak.</p>
     * <p>The frequency of the streak.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("frequency")
    public _FinalStage frequency(@NotNull StreakFrequency frequency) {
      this.frequency = Objects.requireNonNull(frequency, "frequency must not be null");
      return this;
    }

    /**
     * <p>The amount of streak freezes the user will earn per interval. Only present if the organization has enabled streak freeze auto-earn.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage freezeAutoEarnAmount(Integer freezeAutoEarnAmount) {
      this.freezeAutoEarnAmount = Optional.ofNullable(freezeAutoEarnAmount);
      return this;
    }

    /**
     * <p>The amount of streak freezes the user will earn per interval. Only present if the organization has enabled streak freeze auto-earn.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "freezeAutoEarnAmount",
        nulls = Nulls.SKIP
    )
    public _FinalStage freezeAutoEarnAmount(Optional<Integer> freezeAutoEarnAmount) {
      this.freezeAutoEarnAmount = freezeAutoEarnAmount;
      return this;
    }

    /**
     * <p>The interval at which the user will earn streak freezes, in days. Only present if the organization has enabled streak freeze auto-earn.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage freezeAutoEarnInterval(Integer freezeAutoEarnInterval) {
      this.freezeAutoEarnInterval = Optional.ofNullable(freezeAutoEarnInterval);
      return this;
    }

    /**
     * <p>The interval at which the user will earn streak freezes, in days. Only present if the organization has enabled streak freeze auto-earn.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "freezeAutoEarnInterval",
        nulls = Nulls.SKIP
    )
    public _FinalStage freezeAutoEarnInterval(Optional<Integer> freezeAutoEarnInterval) {
      this.freezeAutoEarnInterval = freezeAutoEarnInterval;
      return this;
    }

    /**
     * <p>The maximum number of streak freezes a user can have. Only present if the organization has enabled streak freezes.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage maxFreezes(Integer maxFreezes) {
      this.maxFreezes = Optional.ofNullable(maxFreezes);
      return this;
    }

    /**
     * <p>The maximum number of streak freezes a user can have. Only present if the organization has enabled streak freezes.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "maxFreezes",
        nulls = Nulls.SKIP
    )
    public _FinalStage maxFreezes(Optional<Integer> maxFreezes) {
      this.maxFreezes = maxFreezes;
      return this;
    }

    /**
     * <p>The number of available streak freezes. Only present if the organization has enabled streak freezes.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage freezes(Integer freezes) {
      this.freezes = Optional.ofNullable(freezes);
      return this;
    }

    /**
     * <p>The number of available streak freezes. Only present if the organization has enabled streak freezes.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "freezes",
        nulls = Nulls.SKIP
    )
    public _FinalStage freezes(Optional<Integer> freezes) {
      this.freezes = freezes;
      return this;
    }

    /**
     * <p>The date the streak will expire if the user does not increment a metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage expires(String expires) {
      this.expires = Optional.ofNullable(expires);
      return this;
    }

    /**
     * <p>The date the streak will expire if the user does not increment a metric.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "expires",
        nulls = Nulls.SKIP
    )
    public _FinalStage expires(Optional<String> expires) {
      this.expires = expires;
      return this;
    }

    /**
     * <p>The end date of the current streak period.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage periodEnd(String periodEnd) {
      this.periodEnd = Optional.ofNullable(periodEnd);
      return this;
    }

    /**
     * <p>The end date of the current streak period.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "periodEnd",
        nulls = Nulls.SKIP
    )
    public _FinalStage periodEnd(Optional<String> periodEnd) {
      this.periodEnd = periodEnd;
      return this;
    }

    /**
     * <p>The start date of the current streak period.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage periodStart(String periodStart) {
      this.periodStart = Optional.ofNullable(periodStart);
      return this;
    }

    /**
     * <p>The start date of the current streak period.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "periodStart",
        nulls = Nulls.SKIP
    )
    public _FinalStage periodStart(Optional<String> periodStart) {
      this.periodStart = periodStart;
      return this;
    }

    /**
     * <p>The date the streak started.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage started(String started) {
      this.started = Optional.ofNullable(started);
      return this;
    }

    /**
     * <p>The date the streak started.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "started",
        nulls = Nulls.SKIP
    )
    public _FinalStage started(Optional<String> started) {
      this.started = started;
      return this;
    }

    @java.lang.Override
    public BaseStreakResponse build() {
      return new BaseStreakResponse(length, frequency, started, periodStart, periodEnd, expires, freezes, maxFreezes, freezeAutoEarnInterval, freezeAutoEarnAmount, additionalProperties);
    }
  }
}
