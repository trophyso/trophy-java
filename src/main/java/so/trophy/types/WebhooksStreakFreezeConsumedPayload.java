package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = WebhooksStreakFreezeConsumedPayload.Builder.class
)
public final class WebhooksStreakFreezeConsumedPayload {
  private final User user;

  private final int consumed;

  private final int freezes;

  private final Map<String, Object> additionalProperties;

  private WebhooksStreakFreezeConsumedPayload(User user, int consumed, int freezes,
      Map<String, Object> additionalProperties) {
    this.user = user;
    this.consumed = consumed;
    this.freezes = freezes;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The webhook event type.
   */
  @JsonProperty("type")
  public String getType() {
    return "streak.freeze_consumed";
  }

  /**
   * @return The user whose streak freeze was consumed.
   */
  @JsonProperty("user")
  public User getUser() {
    return user;
  }

  /**
   * @return The number of freezes consumed.
   */
  @JsonProperty("consumed")
  public int getConsumed() {
    return consumed;
  }

  /**
   * @return The total number of freezes the user has left after the consumption.
   */
  @JsonProperty("freezes")
  public int getFreezes() {
    return freezes;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WebhooksStreakFreezeConsumedPayload && equalTo((WebhooksStreakFreezeConsumedPayload) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(WebhooksStreakFreezeConsumedPayload other) {
    return user.equals(other.user) && consumed == other.consumed && freezes == other.freezes;
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.user, this.consumed, this.freezes);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UserStage builder() {
    return new Builder();
  }

  public interface UserStage {
    /**
     * <p>The user whose streak freeze was consumed.</p>
     */
    ConsumedStage user(@NotNull User user);

    Builder from(WebhooksStreakFreezeConsumedPayload other);
  }

  public interface ConsumedStage {
    /**
     * <p>The number of freezes consumed.</p>
     */
    FreezesStage consumed(int consumed);
  }

  public interface FreezesStage {
    /**
     * <p>The total number of freezes the user has left after the consumption.</p>
     */
    _FinalStage freezes(int freezes);
  }

  public interface _FinalStage {
    WebhooksStreakFreezeConsumedPayload build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UserStage, ConsumedStage, FreezesStage, _FinalStage {
    private User user;

    private int consumed;

    private int freezes;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(WebhooksStreakFreezeConsumedPayload other) {
      user(other.getUser());
      consumed(other.getConsumed());
      freezes(other.getFreezes());
      return this;
    }

    /**
     * <p>The user whose streak freeze was consumed.</p>
     * <p>The user whose streak freeze was consumed.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("user")
    public ConsumedStage user(@NotNull User user) {
      this.user = Objects.requireNonNull(user, "user must not be null");
      return this;
    }

    /**
     * <p>The number of freezes consumed.</p>
     * <p>The number of freezes consumed.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("consumed")
    public FreezesStage consumed(int consumed) {
      this.consumed = consumed;
      return this;
    }

    /**
     * <p>The total number of freezes the user has left after the consumption.</p>
     * <p>The total number of freezes the user has left after the consumption.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("freezes")
    public _FinalStage freezes(int freezes) {
      this.freezes = freezes;
      return this;
    }

    @java.lang.Override
    public WebhooksStreakFreezeConsumedPayload build() {
      return new WebhooksStreakFreezeConsumedPayload(user, consumed, freezes, additionalProperties);
    }
  }
}
