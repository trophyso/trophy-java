package so.trophy.main.java.so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = EventResponseMetricsItem.Builder.class
)
public final class EventResponseMetricsItem {
  private final Optional<String> metricId;

  private final Optional<List<AchievementResponse>> completed;

  private final Map<String, Object> additionalProperties;

  private EventResponseMetricsItem(Optional<String> metricId,
      Optional<List<AchievementResponse>> completed, Map<String, Object> additionalProperties) {
    this.metricId = metricId;
    this.completed = completed;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The ID of the metric.
   */
  @JsonProperty("metricId")
  public Optional<String> getMetricId() {
    return metricId;
  }

  /**
   * @return A list of any new achievements that the user has now completed as a result of this event being submitted.
   */
  @JsonProperty("completed")
  public Optional<List<AchievementResponse>> getCompleted() {
    return completed;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EventResponseMetricsItem && equalTo((EventResponseMetricsItem) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(EventResponseMetricsItem other) {
    return metricId.equals(other.metricId) && completed.equals(other.completed);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.metricId, this.completed);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> metricId = Optional.empty();

    private Optional<List<AchievementResponse>> completed = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(EventResponseMetricsItem other) {
      metricId(other.getMetricId());
      completed(other.getCompleted());
      return this;
    }

    @JsonSetter(
        value = "metricId",
        nulls = Nulls.SKIP
    )
    public Builder metricId(Optional<String> metricId) {
      this.metricId = metricId;
      return this;
    }

    public Builder metricId(String metricId) {
      this.metricId = Optional.ofNullable(metricId);
      return this;
    }

    @JsonSetter(
        value = "completed",
        nulls = Nulls.SKIP
    )
    public Builder completed(Optional<List<AchievementResponse>> completed) {
      this.completed = completed;
      return this;
    }

    public Builder completed(List<AchievementResponse> completed) {
      this.completed = Optional.ofNullable(completed);
      return this;
    }

    public EventResponseMetricsItem build() {
      return new EventResponseMetricsItem(metricId, completed, additionalProperties);
    }
  }
}
