package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = MetricAchievementResponse.Builder.class
)
public final class MetricAchievementResponse implements IBaseAchievementResponse {
  private final String id;

  private final String name;

  private final Optional<String> badgeUrl;

  private final Optional<String> key;

  private final Optional<OffsetDateTime> achievedAt;

  private final String trigger;

  private final String metricId;

  private final double metricValue;

  private final String metricName;

  private final Map<String, Object> additionalProperties;

  private MetricAchievementResponse(String id, String name, Optional<String> badgeUrl,
      Optional<String> key, Optional<OffsetDateTime> achievedAt, String trigger, String metricId,
      double metricValue, String metricName, Map<String, Object> additionalProperties) {
    this.id = id;
    this.name = name;
    this.badgeUrl = badgeUrl;
    this.key = key;
    this.achievedAt = achievedAt;
    this.trigger = trigger;
    this.metricId = metricId;
    this.metricValue = metricValue;
    this.metricName = metricName;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The unique ID of the achievement.
   */
  @JsonProperty("id")
  @java.lang.Override
  public String getId() {
    return id;
  }

  /**
   * @return The name of this achievement.
   */
  @JsonProperty("name")
  @java.lang.Override
  public String getName() {
    return name;
  }

  /**
   * @return The URL of the badge image for the achievement, if one has been uploaded.
   */
  @JsonProperty("badgeUrl")
  @java.lang.Override
  public Optional<String> getBadgeUrl() {
    return badgeUrl;
  }

  /**
   * @return The key used to reference this achievement in the API.
   */
  @JsonProperty("key")
  @java.lang.Override
  public Optional<String> getKey() {
    return key;
  }

  /**
   * @return The date and time the achievement was completed, in ISO 8601 format.
   */
  @JsonProperty("achievedAt")
  @java.lang.Override
  public Optional<OffsetDateTime> getAchievedAt() {
    return achievedAt;
  }

  /**
   * @return The trigger of the achievement, in this case always 'metric'.
   */
  @JsonProperty("trigger")
  public String getTrigger() {
    return trigger;
  }

  /**
   * @return The ID of the metric associated with this achievement, if any.
   */
  @JsonProperty("metricId")
  public String getMetricId() {
    return metricId;
  }

  /**
   * @return The value of the metric required to complete the achievement, if this achievement is associated with a metric.
   */
  @JsonProperty("metricValue")
  public double getMetricValue() {
    return metricValue;
  }

  /**
   * @return The name of the metric associated with this achievement, if any.
   */
  @JsonProperty("metricName")
  public String getMetricName() {
    return metricName;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof MetricAchievementResponse && equalTo((MetricAchievementResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(MetricAchievementResponse other) {
    return id.equals(other.id) && name.equals(other.name) && badgeUrl.equals(other.badgeUrl) && key.equals(other.key) && achievedAt.equals(other.achievedAt) && trigger.equals(other.trigger) && metricId.equals(other.metricId) && metricValue == other.metricValue && metricName.equals(other.metricName);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.name, this.badgeUrl, this.key, this.achievedAt, this.trigger, this.metricId, this.metricValue, this.metricName);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    NameStage id(@NotNull String id);

    Builder from(MetricAchievementResponse other);
  }

  public interface NameStage {
    TriggerStage name(@NotNull String name);
  }

  public interface TriggerStage {
    MetricIdStage trigger(@NotNull String trigger);
  }

  public interface MetricIdStage {
    MetricValueStage metricId(@NotNull String metricId);
  }

  public interface MetricValueStage {
    MetricNameStage metricValue(double metricValue);
  }

  public interface MetricNameStage {
    _FinalStage metricName(@NotNull String metricName);
  }

  public interface _FinalStage {
    MetricAchievementResponse build();

    _FinalStage badgeUrl(Optional<String> badgeUrl);

    _FinalStage badgeUrl(String badgeUrl);

    _FinalStage key(Optional<String> key);

    _FinalStage key(String key);

    _FinalStage achievedAt(Optional<OffsetDateTime> achievedAt);

    _FinalStage achievedAt(OffsetDateTime achievedAt);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, NameStage, TriggerStage, MetricIdStage, MetricValueStage, MetricNameStage, _FinalStage {
    private String id;

    private String name;

    private String trigger;

    private String metricId;

    private double metricValue;

    private String metricName;

    private Optional<OffsetDateTime> achievedAt = Optional.empty();

    private Optional<String> key = Optional.empty();

    private Optional<String> badgeUrl = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(MetricAchievementResponse other) {
      id(other.getId());
      name(other.getName());
      badgeUrl(other.getBadgeUrl());
      key(other.getKey());
      achievedAt(other.getAchievedAt());
      trigger(other.getTrigger());
      metricId(other.getMetricId());
      metricValue(other.getMetricValue());
      metricName(other.getMetricName());
      return this;
    }

    /**
     * <p>The unique ID of the achievement.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("id")
    public NameStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    /**
     * <p>The name of this achievement.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("name")
    public TriggerStage name(@NotNull String name) {
      this.name = Objects.requireNonNull(name, "name must not be null");
      return this;
    }

    /**
     * <p>The trigger of the achievement, in this case always 'metric'.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("trigger")
    public MetricIdStage trigger(@NotNull String trigger) {
      this.trigger = Objects.requireNonNull(trigger, "trigger must not be null");
      return this;
    }

    /**
     * <p>The ID of the metric associated with this achievement, if any.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("metricId")
    public MetricValueStage metricId(@NotNull String metricId) {
      this.metricId = Objects.requireNonNull(metricId, "metricId must not be null");
      return this;
    }

    /**
     * <p>The value of the metric required to complete the achievement, if this achievement is associated with a metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("metricValue")
    public MetricNameStage metricValue(double metricValue) {
      this.metricValue = metricValue;
      return this;
    }

    /**
     * <p>The name of the metric associated with this achievement, if any.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("metricName")
    public _FinalStage metricName(@NotNull String metricName) {
      this.metricName = Objects.requireNonNull(metricName, "metricName must not be null");
      return this;
    }

    /**
     * <p>The date and time the achievement was completed, in ISO 8601 format.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage achievedAt(OffsetDateTime achievedAt) {
      this.achievedAt = Optional.ofNullable(achievedAt);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "achievedAt",
        nulls = Nulls.SKIP
    )
    public _FinalStage achievedAt(Optional<OffsetDateTime> achievedAt) {
      this.achievedAt = achievedAt;
      return this;
    }

    /**
     * <p>The key used to reference this achievement in the API.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage key(String key) {
      this.key = Optional.ofNullable(key);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "key",
        nulls = Nulls.SKIP
    )
    public _FinalStage key(Optional<String> key) {
      this.key = key;
      return this;
    }

    /**
     * <p>The URL of the badge image for the achievement, if one has been uploaded.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage badgeUrl(String badgeUrl) {
      this.badgeUrl = Optional.ofNullable(badgeUrl);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "badgeUrl",
        nulls = Nulls.SKIP
    )
    public _FinalStage badgeUrl(Optional<String> badgeUrl) {
      this.badgeUrl = badgeUrl;
      return this;
    }

    @java.lang.Override
    public MetricAchievementResponse build() {
      return new MetricAchievementResponse(id, name, badgeUrl, key, achievedAt, trigger, metricId, metricValue, metricName, additionalProperties);
    }
  }
}
