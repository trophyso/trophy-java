package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = GetUserPointsResponse.Builder.class
)
public final class GetUserPointsResponse implements IGetUserPointsResponse {
  private final String id;

  private final String key;

  private final String name;

  private final Optional<String> description;

  private final Optional<String> badgeUrl;

  private final Optional<Double> maxPoints;

  private final int total;

  private final List<PointsAward> awards;

  private final Map<String, Object> additionalProperties;

  private GetUserPointsResponse(String id, String key, String name, Optional<String> description,
      Optional<String> badgeUrl, Optional<Double> maxPoints, int total, List<PointsAward> awards,
      Map<String, Object> additionalProperties) {
    this.id = id;
    this.key = key;
    this.name = name;
    this.description = description;
    this.badgeUrl = badgeUrl;
    this.maxPoints = maxPoints;
    this.total = total;
    this.awards = awards;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The ID of the points system
   */
  @JsonProperty("id")
  @java.lang.Override
  public String getId() {
    return id;
  }

  /**
   * @return The key of the points system
   */
  @JsonProperty("key")
  @java.lang.Override
  public String getKey() {
    return key;
  }

  /**
   * @return The name of the points system
   */
  @JsonProperty("name")
  @java.lang.Override
  public String getName() {
    return name;
  }

  /**
   * @return The description of the points system
   */
  @JsonProperty("description")
  @java.lang.Override
  public Optional<String> getDescription() {
    return description;
  }

  /**
   * @return The URL of the badge image for the points system
   */
  @JsonProperty("badgeUrl")
  @java.lang.Override
  public Optional<String> getBadgeUrl() {
    return badgeUrl;
  }

  /**
   * @return The maximum number of points a user can be awarded in this points system
   */
  @JsonProperty("maxPoints")
  @java.lang.Override
  public Optional<Double> getMaxPoints() {
    return maxPoints;
  }

  /**
   * @return The user's total points
   */
  @JsonProperty("total")
  @java.lang.Override
  public int getTotal() {
    return total;
  }

  /**
   * @return Array of trigger awards that added points.
   */
  @JsonProperty("awards")
  @java.lang.Override
  public List<PointsAward> getAwards() {
    return awards;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GetUserPointsResponse && equalTo((GetUserPointsResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(GetUserPointsResponse other) {
    return id.equals(other.id) && key.equals(other.key) && name.equals(other.name) && description.equals(other.description) && badgeUrl.equals(other.badgeUrl) && maxPoints.equals(other.maxPoints) && total == other.total && awards.equals(other.awards);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.key, this.name, this.description, this.badgeUrl, this.maxPoints, this.total, this.awards);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    /**
     * <p>The ID of the points system</p>
     */
    KeyStage id(@NotNull String id);

    Builder from(GetUserPointsResponse other);
  }

  public interface KeyStage {
    /**
     * <p>The key of the points system</p>
     */
    NameStage key(@NotNull String key);
  }

  public interface NameStage {
    /**
     * <p>The name of the points system</p>
     */
    TotalStage name(@NotNull String name);
  }

  public interface TotalStage {
    /**
     * <p>The user's total points</p>
     */
    _FinalStage total(int total);
  }

  public interface _FinalStage {
    GetUserPointsResponse build();

    /**
     * <p>The description of the points system</p>
     */
    _FinalStage description(Optional<String> description);

    _FinalStage description(String description);

    /**
     * <p>The URL of the badge image for the points system</p>
     */
    _FinalStage badgeUrl(Optional<String> badgeUrl);

    _FinalStage badgeUrl(String badgeUrl);

    /**
     * <p>The maximum number of points a user can be awarded in this points system</p>
     */
    _FinalStage maxPoints(Optional<Double> maxPoints);

    _FinalStage maxPoints(Double maxPoints);

    /**
     * <p>Array of trigger awards that added points.</p>
     */
    _FinalStage awards(List<PointsAward> awards);

    _FinalStage addAwards(PointsAward awards);

    _FinalStage addAllAwards(List<PointsAward> awards);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, KeyStage, NameStage, TotalStage, _FinalStage {
    private String id;

    private String key;

    private String name;

    private int total;

    private List<PointsAward> awards = new ArrayList<>();

    private Optional<Double> maxPoints = Optional.empty();

    private Optional<String> badgeUrl = Optional.empty();

    private Optional<String> description = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(GetUserPointsResponse other) {
      id(other.getId());
      key(other.getKey());
      name(other.getName());
      description(other.getDescription());
      badgeUrl(other.getBadgeUrl());
      maxPoints(other.getMaxPoints());
      total(other.getTotal());
      awards(other.getAwards());
      return this;
    }

    /**
     * <p>The ID of the points system</p>
     * <p>The ID of the points system</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("id")
    public KeyStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    /**
     * <p>The key of the points system</p>
     * <p>The key of the points system</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("key")
    public NameStage key(@NotNull String key) {
      this.key = Objects.requireNonNull(key, "key must not be null");
      return this;
    }

    /**
     * <p>The name of the points system</p>
     * <p>The name of the points system</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("name")
    public TotalStage name(@NotNull String name) {
      this.name = Objects.requireNonNull(name, "name must not be null");
      return this;
    }

    /**
     * <p>The user's total points</p>
     * <p>The user's total points</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("total")
    public _FinalStage total(int total) {
      this.total = total;
      return this;
    }

    /**
     * <p>Array of trigger awards that added points.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage addAllAwards(List<PointsAward> awards) {
      if (awards != null) {
        this.awards.addAll(awards);
      }
      return this;
    }

    /**
     * <p>Array of trigger awards that added points.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage addAwards(PointsAward awards) {
      this.awards.add(awards);
      return this;
    }

    /**
     * <p>Array of trigger awards that added points.</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "awards",
        nulls = Nulls.SKIP
    )
    public _FinalStage awards(List<PointsAward> awards) {
      this.awards.clear();
      this.awards.addAll(awards);
      return this;
    }

    /**
     * <p>The maximum number of points a user can be awarded in this points system</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage maxPoints(Double maxPoints) {
      this.maxPoints = Optional.ofNullable(maxPoints);
      return this;
    }

    /**
     * <p>The maximum number of points a user can be awarded in this points system</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "maxPoints",
        nulls = Nulls.SKIP
    )
    public _FinalStage maxPoints(Optional<Double> maxPoints) {
      this.maxPoints = maxPoints;
      return this;
    }

    /**
     * <p>The URL of the badge image for the points system</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage badgeUrl(String badgeUrl) {
      this.badgeUrl = Optional.ofNullable(badgeUrl);
      return this;
    }

    /**
     * <p>The URL of the badge image for the points system</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "badgeUrl",
        nulls = Nulls.SKIP
    )
    public _FinalStage badgeUrl(Optional<String> badgeUrl) {
      this.badgeUrl = badgeUrl;
      return this;
    }

    /**
     * <p>The description of the points system</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage description(String description) {
      this.description = Optional.ofNullable(description);
      return this;
    }

    /**
     * <p>The description of the points system</p>
     */
    @java.lang.Override
    @JsonSetter(
        value = "description",
        nulls = Nulls.SKIP
    )
    public _FinalStage description(Optional<String> description) {
      this.description = description;
      return this;
    }

    @java.lang.Override
    public GetUserPointsResponse build() {
      return new GetUserPointsResponse(id, key, name, description, badgeUrl, maxPoints, total, awards, additionalProperties);
    }
  }
}
