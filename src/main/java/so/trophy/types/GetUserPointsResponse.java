package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = GetUserPointsResponse.Builder.class
)
public final class GetUserPointsResponse implements IGetUserPointsResponse {
  private final Optional<Double> total;

  private final Optional<List<PointsAward>> awards;

  private final Map<String, Object> additionalProperties;

  private GetUserPointsResponse(Optional<Double> total, Optional<List<PointsAward>> awards,
      Map<String, Object> additionalProperties) {
    this.total = total;
    this.awards = awards;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The user's total points
   */
  @JsonProperty("total")
  @java.lang.Override
  public Optional<Double> getTotal() {
    return total;
  }

  /**
   * @return Array of trigger awards that added points.
   */
  @JsonProperty("awards")
  @java.lang.Override
  public Optional<List<PointsAward>> getAwards() {
    return awards;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GetUserPointsResponse && equalTo((GetUserPointsResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(GetUserPointsResponse other) {
    return total.equals(other.total) && awards.equals(other.awards);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.total, this.awards);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Double> total = Optional.empty();

    private Optional<List<PointsAward>> awards = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(GetUserPointsResponse other) {
      total(other.getTotal());
      awards(other.getAwards());
      return this;
    }

    @JsonSetter(
        value = "total",
        nulls = Nulls.SKIP
    )
    public Builder total(Optional<Double> total) {
      this.total = total;
      return this;
    }

    public Builder total(Double total) {
      this.total = Optional.ofNullable(total);
      return this;
    }

    @JsonSetter(
        value = "awards",
        nulls = Nulls.SKIP
    )
    public Builder awards(Optional<List<PointsAward>> awards) {
      this.awards = awards;
      return this;
    }

    public Builder awards(List<PointsAward> awards) {
      this.awards = Optional.ofNullable(awards);
      return this;
    }

    public GetUserPointsResponse build() {
      return new GetUserPointsResponse(total, awards, additionalProperties);
    }
  }
}
