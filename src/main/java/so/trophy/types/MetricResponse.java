package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = MetricResponse.Builder.class
)
public final class MetricResponse {
  private final String id;

  private final String key;

  private final String name;

  private final MetricStatus status;

  private final double current;

  private final List<CompletedAchievementResponse> achievements;

  private final Map<String, Object> additionalProperties;

  private MetricResponse(String id, String key, String name, MetricStatus status, double current,
      List<CompletedAchievementResponse> achievements, Map<String, Object> additionalProperties) {
    this.id = id;
    this.key = key;
    this.name = name;
    this.status = status;
    this.current = current;
    this.achievements = achievements;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The unique ID of the metric.
   */
  @JsonProperty("id")
  public String getId() {
    return id;
  }

  /**
   * @return The unique key of the metric.
   */
  @JsonProperty("key")
  public String getKey() {
    return key;
  }

  /**
   * @return The name of the metric.
   */
  @JsonProperty("name")
  public String getName() {
    return name;
  }

  /**
   * @return The status of the metric.
   */
  @JsonProperty("status")
  public MetricStatus getStatus() {
    return status;
  }

  /**
   * @return The user's current total for the metric.
   */
  @JsonProperty("current")
  public double getCurrent() {
    return current;
  }

  /**
   * @return A list of the metric's achievements and the user's progress towards each.
   */
  @JsonProperty("achievements")
  public List<CompletedAchievementResponse> getAchievements() {
    return achievements;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof MetricResponse && equalTo((MetricResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(MetricResponse other) {
    return id.equals(other.id) && key.equals(other.key) && name.equals(other.name) && status.equals(other.status) && current == other.current && achievements.equals(other.achievements);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.key, this.name, this.status, this.current, this.achievements);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    KeyStage id(@NotNull String id);

    Builder from(MetricResponse other);
  }

  public interface KeyStage {
    NameStage key(@NotNull String key);
  }

  public interface NameStage {
    StatusStage name(@NotNull String name);
  }

  public interface StatusStage {
    CurrentStage status(@NotNull MetricStatus status);
  }

  public interface CurrentStage {
    _FinalStage current(double current);
  }

  public interface _FinalStage {
    MetricResponse build();

    _FinalStage achievements(List<CompletedAchievementResponse> achievements);

    _FinalStage addAchievements(CompletedAchievementResponse achievements);

    _FinalStage addAllAchievements(List<CompletedAchievementResponse> achievements);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, KeyStage, NameStage, StatusStage, CurrentStage, _FinalStage {
    private String id;

    private String key;

    private String name;

    private MetricStatus status;

    private double current;

    private List<CompletedAchievementResponse> achievements = new ArrayList<>();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(MetricResponse other) {
      id(other.getId());
      key(other.getKey());
      name(other.getName());
      status(other.getStatus());
      current(other.getCurrent());
      achievements(other.getAchievements());
      return this;
    }

    /**
     * <p>The unique ID of the metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("id")
    public KeyStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    /**
     * <p>The unique key of the metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("key")
    public NameStage key(@NotNull String key) {
      this.key = Objects.requireNonNull(key, "key must not be null");
      return this;
    }

    /**
     * <p>The name of the metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("name")
    public StatusStage name(@NotNull String name) {
      this.name = Objects.requireNonNull(name, "name must not be null");
      return this;
    }

    /**
     * <p>The status of the metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("status")
    public CurrentStage status(@NotNull MetricStatus status) {
      this.status = Objects.requireNonNull(status, "status must not be null");
      return this;
    }

    /**
     * <p>The user's current total for the metric.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("current")
    public _FinalStage current(double current) {
      this.current = current;
      return this;
    }

    /**
     * <p>A list of the metric's achievements and the user's progress towards each.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage addAllAchievements(List<CompletedAchievementResponse> achievements) {
      this.achievements.addAll(achievements);
      return this;
    }

    /**
     * <p>A list of the metric's achievements and the user's progress towards each.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage addAchievements(CompletedAchievementResponse achievements) {
      this.achievements.add(achievements);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "achievements",
        nulls = Nulls.SKIP
    )
    public _FinalStage achievements(List<CompletedAchievementResponse> achievements) {
      this.achievements.clear();
      this.achievements.addAll(achievements);
      return this;
    }

    @java.lang.Override
    public MetricResponse build() {
      return new MetricResponse(id, key, name, status, current, achievements, additionalProperties);
    }
  }
}
