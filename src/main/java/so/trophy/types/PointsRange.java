package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = PointsRange.Builder.class
)
public final class PointsRange {
  private final int from;

  private final int to;

  private final int users;

  private final Map<String, Object> additionalProperties;

  private PointsRange(int from, int to, int users, Map<String, Object> additionalProperties) {
    this.from = from;
    this.to = to;
    this.users = users;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The start of the points range. Inclusive.
   */
  @JsonProperty("from")
  public int getFrom() {
    return from;
  }

  /**
   * @return The end of the points range. Inclusive.
   */
  @JsonProperty("to")
  public int getTo() {
    return to;
  }

  /**
   * @return The number of users in this points range.
   */
  @JsonProperty("users")
  public int getUsers() {
    return users;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PointsRange && equalTo((PointsRange) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(PointsRange other) {
    return from == other.from && to == other.to && users == other.users;
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.from, this.to, this.users);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static FromStage builder() {
    return new Builder();
  }

  public interface FromStage {
    /**
     * <p>The start of the points range. Inclusive.</p>
     */
    ToStage from(int from);

    Builder from(PointsRange other);
  }

  public interface ToStage {
    /**
     * <p>The end of the points range. Inclusive.</p>
     */
    UsersStage to(int to);
  }

  public interface UsersStage {
    /**
     * <p>The number of users in this points range.</p>
     */
    _FinalStage users(int users);
  }

  public interface _FinalStage {
    PointsRange build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements FromStage, ToStage, UsersStage, _FinalStage {
    private int from;

    private int to;

    private int users;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(PointsRange other) {
      from(other.getFrom());
      to(other.getTo());
      users(other.getUsers());
      return this;
    }

    /**
     * <p>The start of the points range. Inclusive.</p>
     * <p>The start of the points range. Inclusive.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("from")
    public ToStage from(int from) {
      this.from = from;
      return this;
    }

    /**
     * <p>The end of the points range. Inclusive.</p>
     * <p>The end of the points range. Inclusive.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("to")
    public UsersStage to(int to) {
      this.to = to;
      return this;
    }

    /**
     * <p>The number of users in this points range.</p>
     * <p>The number of users in this points range.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("users")
    public _FinalStage users(int users) {
      this.users = users;
      return this;
    }

    @java.lang.Override
    public PointsRange build() {
      return new PointsRange(from, to, users, additionalProperties);
    }
  }
}
