package so.trophy.types;

/**
 * This file was auto-generated by Fern from our API Definition.
 */


import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import so.trophy.core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = PointsRange.Builder.class
)
public final class PointsRange {
  private final Optional<Double> from;

  private final Optional<Double> to;

  private final Optional<Double> users;

  private final Map<String, Object> additionalProperties;

  private PointsRange(Optional<Double> from, Optional<Double> to, Optional<Double> users,
      Map<String, Object> additionalProperties) {
    this.from = from;
    this.to = to;
    this.users = users;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The start of the points range. Inclusive.
   */
  @JsonProperty("from")
  public Optional<Double> getFrom() {
    return from;
  }

  /**
   * @return The end of the points range. Inclusive.
   */
  @JsonProperty("to")
  public Optional<Double> getTo() {
    return to;
  }

  /**
   * @return The number of users in this points range.
   */
  @JsonProperty("users")
  public Optional<Double> getUsers() {
    return users;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PointsRange && equalTo((PointsRange) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(PointsRange other) {
    return from.equals(other.from) && to.equals(other.to) && users.equals(other.users);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.from, this.to, this.users);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Double> from = Optional.empty();

    private Optional<Double> to = Optional.empty();

    private Optional<Double> users = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(PointsRange other) {
      from(other.getFrom());
      to(other.getTo());
      users(other.getUsers());
      return this;
    }

    @JsonSetter(
        value = "from",
        nulls = Nulls.SKIP
    )
    public Builder from(Optional<Double> from) {
      this.from = from;
      return this;
    }

    public Builder from(Double from) {
      this.from = Optional.ofNullable(from);
      return this;
    }

    @JsonSetter(
        value = "to",
        nulls = Nulls.SKIP
    )
    public Builder to(Optional<Double> to) {
      this.to = to;
      return this;
    }

    public Builder to(Double to) {
      this.to = Optional.ofNullable(to);
      return this;
    }

    @JsonSetter(
        value = "users",
        nulls = Nulls.SKIP
    )
    public Builder users(Optional<Double> users) {
      this.users = users;
      return this;
    }

    public Builder users(Double users) {
      this.users = Optional.ofNullable(users);
      return this;
    }

    public PointsRange build() {
      return new PointsRange(from, to, users, additionalProperties);
    }
  }
}
